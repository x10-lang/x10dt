<?xml version="1.0" encoding="UTF-8"?>
<project name="x10dt.update.custom" basedir=".">

    <target name="init.custom">
        <property name="global.plugin.script" value="../x10dt.update/exportPlugin.xml"/>
        <property name="default.feature.script" value="../x10dt.update/exportFeature.xml"/>

        <property name="cache.dir" value="./cache"/>
        <mkdir dir="${cache.dir}"/>

        <property name="imp.update.url" value="${imp.update.url.base}/org.eclipse.imp.update_${imp.update.version}.zip"/>

        <property name="imp.update.cache.zip" value="${cache.dir}/imp.update_${imp.update.version}.zip"/>
        <property name="imp.update.cache.dir" value="${cache.dir}/imp.update/${imp.update.version}"/>

        <available property="imp.update.cache.present" file="${cache.dir}/${imp.update.cache.dir}"/>

        <available file="${imp.update.cache.dir}/features" property="imp.update.cache.verified"/>

<!--        <fail unless="imp.update.cache.verified" message="The IMP download cache does not appear to be valid."/> -->

        <property name="ptp.update.url" value="http://fullmoon.rtp.raleigh.ibm.com/tools/ptp/builds/${ptp.build.dir}/ptp-master-${ptp.update.version}.zip"/>

        <property name="ptp.update.cache.zip" value="${cache.dir}/ptp.update_${ptp.update.version}.zip"/>
        <property name="ptp.update.cache.dir" value="${cache.dir}/ptp.update/${ptp.update.version}"/>

        <available property="ptp.update.cache.present" file="${cache.dir}/${ptp.update.cache.dir}"/>

        <available file="${ptp.update.cache.dir}/features" property="ptp.update.cache.verified"/>

        <property name="polyglotProjectName"   value="polyglot3"/>

        <!-- Remove the following workspace checks, once we're able to build against plugin jars (cf. source) for our dependencies -->
        <available file="../${polyglotProjectName}" property="polyglot.workspace.verified"/>
        <fail unless="polyglot.workspace.verified">
            The project '${polyglotProjectName}' does not exist in your workspace.
        </fail>
        <available file="../lpg.update" property="lpg.workspace.verified"/>
        <fail unless="lpg.workspace.verified">
            The project 'lpg.update' does not exist in your workspace.
        </fail>
    </target>

	<target name="prepare.x10.dist">
        <ant antfile="../x10.dist/build.xml" dir="../x10.dist" target="squeakyclean"/>
        <ant antfile="../x10.dist/build.xml" dir="../x10.dist" target="bin"/>
        <ant antfile="../x10.dist/build.xml" dir="../x10.dist" target="ecj-jar"/>
        <ant antfile="../x10.dist/build.xml" dir="../x10.dist" target="polyglot-jar"/>
        <ant antfile="../x10.dist/build.xml" dir="../x10.dist" target="lpg-jar"/>
        <ant antfile="../x10.dist/build.xml" dir="../x10.dist" target="compiler-jar"/>
	</target>

    <target name="retrieve.imp" depends="init.custom" unless="imp.update.cache.verified">
        <echo message="Retrieving IMP from ${imp.update.url}... this could take a while..."/>
        <!-- add verbose="true" to the 'get' task below to print '.' for every 100K download, but this is too much...   -->
        <get src="${imp.update.url}" dest="${imp.update.cache.zip}" />
        <unzip src="${imp.update.cache.zip}" dest="${imp.update.cache.dir}"/>
    </target>

    <target name="retrieve.ptp"   unless="ptp.update.cache.verified">
        <echo message="Retrieving PTP from ${ptp.update.url}..."/>
        <get src="${ptp.update.url}" dest="${ptp.update.cache.zip}" verbose="true"/>
        <unzip src="${ptp.update.cache.zip}" dest="${ptp.update.cache.dir}"/>
<!--    <unjar src="${ptp.update.cache.dir}/plugins/org.eclipse.ptp.ui_*.jar" dest="${ptp.update.cache.dir}">
            <fileset includesfile="ptpui.jar"/>
        </unjar>
  -->
    </target>

    <target name="add.all.features" depends="init">
        <antcall target="add.features.to.site.xml.x10dt"/>
<!--    <antcall target="add.features.to.site.xml.sdf"/> -->
        <antcall target="add.features.to.site.xml.lpg"/>
        <antcall target="add.features.to.site.xml.polyglot"/>
        <antcall target="add.features.to.site.xml.imp"/>
        <antcall target="add.features.to.site.xml.ptp"/>
    </target>

    <target name="add.features.to.site.xml.sdf">
        <antcall target="add.feature">
            <param name="feature.id"      value="sdf_eclipse_installer_feature"/>
            <param name="feature.version" value="${sdf.update.version}"/>
            <param name="category"        value="${sdf.update.category}"/>
        </antcall>
    </target>

    <target name="add.features.to.site.xml.lpg">
<!--    <antcall target="add.feature">
            <param name="feature.id"      value="lpg.generator"/>
            <param name="feature.version" value="${lpg.update.version}"/>
            <param name="category"        value="${lpg.update.category}"/>
        </antcall>
  -->
        <antcall target="add.feature">
            <param name="feature.id"      value="lpg.runtime"/>
            <param name="feature.version" value="${lpg.update.version}"/>
            <param name="category"        value="${lpg.update.category}"/>
        </antcall>
    </target>

    <target name="add.features.to.site.xml.polyglot">
        <antcall target="add.feature">
            <param name="feature.id"      value="polyglot3"/>
            <param name="feature.version" value="${polyglot.update.version}"/>
            <param name="category"        value="${polyglot.update.category}"/>
        </antcall>
    </target>

    <target name="add.features.to.site.xml.x10dt">
        <for param="feature.id" values="${feature.list}" separator=",">
            <!-- The following, when inlined, fails to set a new feature.version for each iteration (why???) -->
            <antcall target="add.qualified.bin.src.features">
                <param name="feature.category" value="X10DT"/>
                <param name="feature.src.category" value="X10DT"/>
            </antcall>
        </for>
    </target>

    <target name="add.features.to.site.xml.imp">
        <fileset id="imp.feature.jar.filelist" dir="${imp.update.cache.dir}/features">
            <include name="org.eclipse.imp.runtime*.jar"/>
            <include name="org.eclipse.imp.java.hosted*.jar"/>
            <!-- <include name="lpg.runtime*.jar"/> LPG is included itself, above-->
        </fileset>
        <pathconvert property="imp.feature.jar.list" refid="imp.feature.jar.filelist"/>

        <for param="feature.jar" values="${imp.feature.jar.list}" separator=":">
            <!-- The following, when inlined, fails to set a new feature.version for each iteration (why???) -->
            <propertyRegexp name="feature.id" input="${feature.jar}" regexp=".*/([^/]*)\_.*\.jar" value="\1"/>
            <propertyRegexp name="feature.version" input="${feature.jar}" regexp=".*/[^/]*\_(.*)\.jar" value="\1"/>
            <antcall target="add.feature">
                <param name="feature.id" value="${feature.id}"/>
                <param name="feature.version" value="${feature.version}"/>
                <param name="category" value="X10DT Prerequisites"/>
            </antcall>
        </for>
    </target>
    
    <target name="add.features.to.site.xml.ptp">
        <fileset id="ptp.feature.jar.filelist" dir="${ptp.update.cache.dir}/features">
            <include name="org.eclipse.ptp.core*.jar"/>
            <include name="org.eclipse.ptp.debug*.jar"/>
            <!-- <include name="org.eclipse.ptp.master*.jar"/> -->
            <include name="org.eclipse.ptp.external*.jar"/>
            <include name="org.eclipse.ptp.remote*.jar"/><!-- includes RSE-->
            <include name="org.eclipse.ptp.rm*.jar"/>
            <include name="org.eclipse.ptp.services*.jar"/>
            <include name="org.eclipse.ptp.ui*.jar"/>
            <include name="org.eclipse.ptp.utils*.jar"/>
           </fileset>
        <pathconvert property="ptp.feature.jar.list" refid="ptp.feature.jar.filelist"/>

        <for param="feature.jar" values="${ptp.feature.jar.list}" separator=":">
            <!-- The following, when inlined, fails to set a new feature.version for each iteration (why???) -->
            <propertyRegexp name="feature.id" input="${feature.jar}" regexp=".*/([^/]*)\_.*\.jar" value="\1"/>
            <propertyRegexp name="feature.version" input="${feature.jar}" regexp=".*/[^/]*\_(.*)\.jar" value="\1"/>
            <antcall target="add.feature">
                <param name="feature.id" value="${feature.id}"/>
                <param name="feature.version" value="${feature.version}"/>
                <param name="category" value="X10DT Prerequisites"/>
            </antcall>
        </for>
    </target>

    <target name="collect.extra.artifacts">
        <mkdir dir="${update.temp.folder}/plugins"/>
        <mkdir dir="${update.temp.folder}/features"/>

        <antcall target="retrieve.ptp"/>

        <path id="path.ptp.build.path">
            <fileset dir="${ptp.update.cache.dir}/plugins">
                <include name="**/*.jar"/>
            </fileset>
        </path>
        <pathconvert property="extra.build.path" refid="path.ptp.build.path" targetos="unix"/>

        <antcall target="prepare.x10.dist"/>

        <antcall target="collect.lpg.artifacts"/>
        <antcall target="collect.polyglot.artifacts"/> 
        <antcall target="collect.imp.artifacts"/>
        <antcall target="collect.ptp.artifacts"/>
    </target>

    <target name="collect.lpg.artifacts" depends="init">
        <!-- Get the LPG runtime bundles (real and wrapper) -->
        <property name="lpg.runtime.java.jar.name" value="lpg.runtime.java_${lpg.update.version}.jar"/>
        <property name="lpg.runtime.java.plugin.url" value="${lpg.update.site.url}/plugins/${lpg.runtime.java.jar.name}"/>
        <get usetimestamp="yes" dest="${update.temp.folder}/plugins/${lpg.runtime.java.jar.name}" src="${lpg.runtime.java.plugin.url}"/>

        <property name="lpg.runtime.jar.name" value="lpg.runtime_${lpg.update.version}.jar"/>
        <property name="lpg.runtime.plugin.url" value="${lpg.update.site.url}/plugins/${lpg.runtime.jar.name}"/>
        <get usetimestamp="yes" dest="${update.temp.folder}/plugins/${lpg.runtime.jar.name}" src="${lpg.runtime.plugin.url}"/>

        <!-- Get the feature -->
        <property name="lpg.feature.jar.name" value="lpg.runtime_${lpg.update.version}.jar"/>
        <property name="lpg.runtime.feature.url" value="${lpg.update.site.url}/features/${lpg.feature.jar.name}"/>
        <get usetimestamp="yes" dest="${update.temp.folder}/features/${lpg.feature.jar.name}" src="${lpg.runtime.feature.url}"/>
    </target>

    <target name="collect.polyglot.artifacts" depends="init">
        <property name="polyglot.jar.name" value="polyglot3_${polyglot.update.version}.jar"/>
        <property name="polyglot.plugin.url" value="${polyglot.update.site.url}/plugins/${polyglot.jar.name}"/>
        <get usetimestamp="yes" dest="${update.temp.folder}/plugins/${polyglot.jar.name}" src="${polyglot.plugin.url}"/>

        <property name="polyglot.feature.jar.name" value="polyglot3_${polyglot.update.version}.jar"/>
        <property name="polyglot.feature.url" value="${polyglot.update.site.url}/features/${polyglot.feature.jar.name}"/>
        <get usetimestamp="yes" dest="${update.temp.folder}/features/${polyglot.feature.jar.name}" src="${polyglot.feature.url}"/>
    </target>

    <target name="collect.imp.artifacts" depends="retrieve.imp">
         <!-- imp.update.cache.dir is the local cache of the (unzipped) IMP update site   -->
        <copy todir="${update.temp.folder}/features" failonerror="true" overwrite="false">
           <fileset dir="${imp.update.cache.dir}/features/" includes="org.eclipse.imp.runtime*.jar"/>
            <fileset dir="${imp.update.cache.dir}/features/" includes="org.eclipse.imp.java.hosted*.jar"/>
        </copy>
         <!-- fixme really should dynamically copy plugin jars based on list in feature manifest -->
        <copy todir="${update.temp.folder}/plugins" failonerror="true" overwrite="false">
            <fileset dir="${imp.update.cache.dir}/plugins" includes="org.eclipse.imp.doc*.jar"/>
             <fileset dir="${imp.update.cache.dir}/plugins" includes="org.eclipse.imp.runtime*.jar"/>
             <fileset dir="${imp.update.cache.dir}/plugins" includes="org.eclipse.imp.smapi*.jar"/>
             <fileset dir="${imp.update.cache.dir}/plugins" includes="org.eclipse.imp.smapifier*.jar"/>
             <fileset dir="${imp.update.cache.dir}/plugins" includes="org.eclipse.imp.xform*.jar"/>
             <fileset dir="${imp.update.cache.dir}/plugins" includes="org.eclipse.imp.java.hosted*.jar"/>
             <fileset dir="${imp.update.cache.dir}/plugins" includes="com.ibm.wala.shrike*.jar"/>            
        </copy>
    </target>

    <target name="collect.ptp.artifacts" depends="retrieve.ptp">
        <!-- ptp.update.cache.dir is the local cache of the (unzipped) ptp update site   
            which is the unzipped contents of ptp-master-*.zip   -->
        <copy todir="${update.temp.folder}/features" failonerror="true" overwrite="false">
            <fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.core*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.external*.jar"/>
        	<fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.debug*.jar"/> 
          
            <fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.remotetools*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.remote.remotetools*.jar"/>
        	<fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.remote.rse*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.remote_*.jar"/>
            
            <fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.rm*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.services*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.ui*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/features/" includes="org.eclipse.ptp.utils*.jar"/>
             
        </copy>
        <copy todir="${update.temp.folder}/plugins" failonerror="true" overwrite="false">
        	<fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp_*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.aix*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.core*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.debug*.jar"/> 
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.help*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.launch*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.linux*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.macosx*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.proxy*.jar"/>
            
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.remotetools*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.remote.remotetools*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.remote_*.jar"/>
        	<fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.remote.rse*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.remote.core*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.remote.ui*.jar"/>
            
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.rm*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.services*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.ui*.jar"/>
            <fileset dir="${ptp.update.cache.dir}/plugins/" includes="org.eclipse.ptp.utils*.jar"/>         
        </copy>
    </target>
</project>
