#ifndef __X10_UTIL_PAIR_STRUCT_H
#define __X10_UTIL_PAIR_STRUCT_H

#include <x10aux/config.h>
#include <x10aux/ref.h>
#include <x10aux/RTT.h>
#include <x10aux/serialization.h>

namespace x10 { namespace util { 
template<class FMGL(T), class FMGL(U)> class Pair_methods;
} } 
namespace x10 { namespace util { 

template<class FMGL(T), class FMGL(U)> class Pair  {
    public:
    RTT_H_DECLS_STRUCT
    
    typedef x10::util::Pair_methods<FMGL(T), FMGL(U)> _METHODS;
    
    x10::util::Pair<FMGL(T), FMGL(U)>* operator->() { return this; }
    
    static x10aux::itable_entry _itables[2];
    
    x10aux::itable_entry* _getITables() { return _itables; }
    
    static x10aux::itable_entry _iboxitables[2];
    
    x10aux::itable_entry* _getIBoxITables() { return _iboxitables; }
    
    FMGL(T) FMGL(first);
    
    FMGL(U) FMGL(second);
    
    
    static void _serialize(x10::util::Pair<FMGL(T), FMGL(U)> this_, x10aux::serialization_buffer& buf);
    
    static x10::util::Pair<FMGL(T), FMGL(U)> _deserialize(x10aux::deserialization_buffer& buf) {
        x10::util::Pair<FMGL(T), FMGL(U)> this_;
        this_->_deserialize_body(buf);
        return this_;
    }
    
    void _deserialize_body(x10aux::deserialization_buffer& buf);
    x10_boolean equals(x10aux::ref<x10::lang::Any>);
    
    x10_boolean equals(x10::util::Pair<FMGL(T), FMGL(U)>);
    
    x10_boolean _struct_equals(x10aux::ref<x10::lang::Any>);
    
    x10_boolean _struct_equals(x10::util::Pair<FMGL(T), FMGL(U)>);
    
    x10aux::ref<x10::lang::String> toString();
    
    x10_int hashCode();
    
    
};
template <> class Pair<void, void> {
    public:
    static x10aux::RuntimeType rtt;
    static const x10aux::RuntimeType* getRTT() { return & rtt; }
    
};

} } 
#endif // X10_UTIL_PAIR_STRUCT_H

