<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
           "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<meta name="GENERATOR" content="TtH 3.89">
 <style type="text/css"> div.p { margin-top: 7pt;}</style>
 <style type="text/css"><!--
 td div.comp { margin-top: -0.6ex; margin-bottom: -1ex;}
 td div.comb { margin-top: -0.6ex; margin-bottom: -.6ex;}
 td div.hrcomp { line-height: 0.9; margin-top: -0.8ex; margin-bottom: -1ex;}
 td div.norm {line-height:normal;}
 span.roman {font-family: serif; font-style: normal; font-weight: normal;} 
 span.overacc2 {position: relative;  left: .8em; top: -1.2ex;}
 span.overacc1 {position: relative;  left: .6em; top: -1.2ex;} --></style>
 
      
<title>`</title>

<div class="p"><!----></div>
 


<div class="p"><!----></div>
 

<div class="p"><!----></div>
 

<div class="p"><!----></div>
 


<div class="p"><!----></div>

<div class="p"><!----></div>

<div class="p"><!----></div>
  




<div class="p"><!----></div>

<div class="p"><!----></div>
  
<div class="p"><!----></div>

<div class="p"><!----></div>
 <h1><a name="tth_chAp1">
Chapter 14 </a><br />Activities</h1><a name="XtenActivities">
</a>


<div class="p"><!----></div>
An <em>activity</em> is a statement being executed, independently, with its own
local variables; it may be thought of as a very light-weight thread. An
X10 computation may have many concurrent activities executing at any
give time.  All X10 code runs as part of an activity; when an X10 program is
started, the <b>main</b> method is invoked in an activity, called the <em>root
activity</em>.

<div class="p"><!----></div>
Activities coordinate their execution by various control and data structures.
For example, 
<b>when(x==0);</b> blocks the current activity until some other activity
sets <b>x</b> to zero.  However, activities determine the places at which they
may be blocked and resumed, by <b>when</b> and similar constructs.  There are
no means by which one activity can arbitrarily interrupt, block, or resume
another.

<div class="p"><!----></div>
An activity may be <em>running</em>, <em>blocked</em> on some condition or <em>
terminated</em>. If it is terminated, it is terminated in the same way that its
statement is: in particular, if the statement terminates abruptly, the
activity terminates abruptly for the same reason.
(&#167;).

<div class="p"><!----></div>
Activities can be long-running entities with a good deal of local state.  In
particular they can involve recursive method calls (and therefore have runtime
stacks).  However, activities can also be short-running light-weight entities,
<em>e.g.</em>, it is reasonable to have an activity that simply increments a variable.

<div class="p"><!----></div>
An activity may asynchronously and in parallel launch activities at
other places.  Every activity except the initial <b>main</b> activity is spawned
by another.  Thus, at any instant, the activities in a program form a tree.

<div class="p"><!----></div>
X10 uses this tree in crucial ways.  
First is the distinction 
between <em>local</em> termination and <em>global</em>
termination of a statement. The execution of a statement by an
activity is said to terminate locally when the activity has finished
all its computation. (For instance the
creation of an asynchronous activity terminates locally when the
activity has been created.)  It is said to terminate globally when it
has terminated locally and all activities that it may have spawned at
any place have, recursively, terminated globally.
For example, consider: 
<pre>
async {s1();}
async {s2();}
</pre>
The primary activity spawns two child activities and then terminates locally,
very quickly.  The child activities may take arbitrary amounts of time to
terminate (and may spawn grandchildren).  When <b>s1()</b>, <b>s2()</b>, and
all their descendants terminate locally, then the primary activity terminates
globally. 

<div class="p"><!----></div>
The program as a whole terminates when the root activity terminates globally.
In particular, X10 does not permit the creation of 
daemon threads-threads that outlive the lifetime of the root
activity.  We say that an X10 computation is <em>rooted</em>
(&#167;).

<div class="p"><!----></div>
<em>
<b>Future Extensions.&nbsp;&nbsp;</b> We may permit the initial activity to be a daemon activity
to permit reactive computations, such as webservers, that may not
terminate.</em>

<div class="p"><!----></div>
 <h2><a name="tth_sEc1">
1</a>&nbsp;&nbsp;The X10 rooted exception model</h2>
<a name="ExceptionModel">
</a>




<div class="p"><!----></div>
The rooted nature of X10 computations permits the definition of a
<em>rooted exception model.</em> In multi-threaded programming languages
there is a natural parent-child relationship between a thread and a
thread that it spawns. Typically the parent thread continues execution
in parallel with the child thread. Therefore the parent thread cannot
serve to catch any exceptions thrown by the child thread. 

<div class="p"><!----></div>
The presence of a root activity and the concept of global termination permits
X10 to adopt a more powerful exception model. In any state of the
computation, say that an activity A is <em>a root of</em> an activity B if
A is an ancestor of B and A is blocked at a statement (such as the
<b>finish</b> statement &#167;) awaiting the termination of B (and
possibly other activities). For every X10 computation, the <em>root-of</em>
relation is guaranteed to be a tree. The root of the tree is the root activity
of the entire computation. If A is the nearest root of B, the path from
A to B is called the <em>activation path</em> for the activity.<a href="#tthFtNtAAB" name="tthFrefAAB"><sup>1</sup></a>

<div class="p"><!----></div>
We may now state the exception model for X10.  An uncaught exception
propagates up the activation path to its nearest root activity, where
it may be handled locally or propagated up the <em>root-of</em> tree when
the activity terminates (based on the semantics of the statement being
executed by the activity).<a href="#tthFtNtAAC" name="tthFrefAAC"><sup>2</sup></a>  
There is always a good place to put a <b>try</b>-<b>catch</b> block to catch
exceptions thrown by an asynchronous activity.

<div class="p"><!----></div>
 <h2><a name="tth_sEc2">
2</a>&nbsp;&nbsp;<tt>async</tt>: Spawning an activity</h2><a name="AsynchronousActivity">
</a><a name="AsyncActivity">
</a>



<div class="p"><!----></div>
Asynchronous activities serve as a single abstraction for supporting a
wide range of concurrency constructs such as message passing, threads,
DMA, streaming, and data prefetching. (In general, asynchronous operations
are better suited for supporting scalability than synchronous
operations.)

<div class="p"><!----></div>
An activity is created by executing the <b>async</b> statement: 

<div class="p"><!----></div>

 
 
  
  
  
  <em>
  
<table>

<tr><td align="right">AsyncStatement ::= <b>async</b> ClockedClause<sup>?</sup>&nbsp;Statement </td></tr>
<tr><td align="right">&#124; <b>clocked</b> <b>async</b> Statement </td></tr>
<tr><td align="right">ClockedClause ::= <b>clocked</b> <b>(</b> ClockList <b>)</b> </td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
The basic form of <b>async</b> is <b>async S</b>, which starts a new activity
located <b>here</b> executing <b>S</b>.   (For the clocked form, see
&#167;.)  

<div class="p"><!----></div>
Multiple activities launched by a single activity at another place are not
ordered in any way. They are added to the set of activities at the target
place and will be executed based on the local scheduler's decisions.
If some particular sequencing of events is needed, <b>when</b>, <b>atomic</b>,
<b>finish</b>, clocks, and other X10 constructs can be used.
X10 implementations are not required to have fair schedulers,
though every implementation should make a best faith effort to ensure
that every activity eventually gets a chance to make forward progress.

<div class="p"><!----></div>
The statement in the body of an <b>async</b> is subject to the
restriction that it must be acceptable as the body of a <b>void</b>
method for an anonymous inner class declared at that point in the code. For
example, it may reference <b>val</b> variables in lexically enclosing scopes,
but 
not <b>var</b> variables.

<div class="p"><!----></div>
 <h2><a name="tth_sEc3">
3</a>&nbsp;&nbsp;Finish</h2><a name="finish">
</a>
The statement <b>finish S</b> converts global termination to local
termination.

<div class="p"><!----></div>

 
 
  
  
  
  <em>
  
<table>

<tr><td align="right">FinishStatement ::= <b>finish</b> Statement </td></tr>
<tr><td align="right">&#124; <b>clocked</b> <b>finish</b> Statement </td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
An activity A executes <b>finish S</b> by executing <b>S</b> and
then waiting for all activities spawned by <b>S</b> (directly or
indirectly, here or at other places) to terminate. An activity may
terminate normally, or abruptly, i.e. by throwing an exception.
All exceptions thrown by spawned activities are caught and
accumulated. 

<div class="p"><!----></div>
<b>finish S</b> terminates locally when all activities spawned by
<b>S</b> terminate globally (either abruptly or normally). If <b>S</b>
terminates normally, then <b>finish S</b> terminates normally and A
continues execution with the next statement after <b>finish S</b>.  If
<b>S</b> or one of the activities spawned by it terminate abruptly,
then <b>finish S</b> terminates abruptly and throws a single exception,
of type <b>x10.lang.MultipleExceptions</b>, formed from the collection of
exceptions accumulated at <b>finish S</b>.

<div class="p"><!----></div>
Thus <b>finish S</b> statement serves as a collection point for
uncaught exceptions generated during the execution of <b>S</b>.

<div class="p"><!----></div>
Note that repeatedly <b>finish</b>ing a statement has little effect after
the first <b>finish</b>: <b>finish finish S</b> is indistinguishable
from <b>finish S</b> if <b>S</b> terminates normally.  If <b>S</b> throws
exceptions, <b>finish S</b> collects the exceptions and wraps them in a 
<b>MultipleExceptions</b>, whereas <b>finish finish S</b> does the same, and
then puts that <b>MultipleExceptions</b> inside of a second
<b>MultipleExceptions</b>. 

<div class="p"><!----></div>
 <h2><a name="tth_sEc4">
4</a>&nbsp;&nbsp;Initial activity</h2><a name="initial-computation">
</a>



<div class="p"><!----></div>
An X10 computation is initiated from the command line on the
presentation of a class or struct name <b>C</b>. The container must have a 
<b>main</b> method: 
<pre>
public static def main(a: Array[String](1)):void
</pre>
method, 
or a 
<pre>
public static def main(a: Array[String]):void
</pre>
method, 
otherwise an exception is thrown
and the computation terminates.  The single statement
<pre>
finish async at (Place.FIRST_PLACE) {
  C.main(s);
}
</pre>
 is executed where <b>s</b> is a one-dimensional <b>Array</b> of
strings created 
from the command line arguments. This single activity is the root activity
for the entire computation. (See &#167; for a discussion of
places.)

<div class="p"><!----></div>
 <h2><a name="tth_sEc5">
5</a>&nbsp;&nbsp;Ateach statements</h2><a name="ateach-section">
</a>

<b>Deprecated: </b> The <b>ateach</b> construct is deprecated.

<div class="p"><!----></div>

 
 
  
  
  
  <em>
  
<table>

<tr><td align="right">AtEachStatement ::= <b>ateach</b> <b>(</b> LoopIndex <b>in</b> Exp <b>)</b> ClockedClause<sup>?</sup>&nbsp;Statement </td></tr>
<tr><td align="right">&#124; <b>ateach</b> <b>(</b> Exp <b>)</b> Statement </td></tr>
<tr><td align="right">LoopIndexDeclarator ::= Id HasResultType<sup>?</sup>&nbsp;</td></tr>
<tr><td align="right">&#124; <b>[</b> IdList <b>]</b> HasResultType<sup>?</sup>&nbsp;</td></tr>
<tr><td align="right">&#124; Id <b>[</b> IdList <b>]</b> HasResultType<sup>?</sup>&nbsp;</td></tr>
<tr><td align="right">LoopIndex ::= Mods<sup>?</sup>&nbsp;LoopIndexDeclarator </td></tr>
<tr><td align="right">&#124; Mods<sup>?</sup>&nbsp;VarKeyword LoopIndexDeclarator </td></tr>
<tr><td align="right"></td></tr></table>
</em>
In <b>ateach(p in D) S</b>, <b>D</b> must be either of type <b>Dist</b>
(see &#167;) or of type <b>DistArray[T]</b> (see
&#167;), and <b>p</b> will be of type <b>Point</b> (see
&#167;). If <b>D</b> is an <b>DistArray[T]</b>, then
<b>ateach (p in D)S</b> is identical to 
<b>ateach(p in D.dist)S</b>; the iteration is over the array's underlying
distribution.   

<div class="p"><!----></div>
Instead of writing <b>ateach (p in D) S</b> the programmer should write 
<b>for(p in D) at(D(p)) async S</b> to get the same effect. 
For each point <b>p</b> in <b>D</b>, at place <b>D(p)</b>, transmitting
information as specified by <b>F</b>, 
<b>S</b> is
executed simultaneously.

<div class="p"><!----></div>
However, this often results in excessive communication and parallelism. Instead the
programmer may want to write: 

<div class="p"><!----></div>
<pre>
</pre>

<div class="p"><!----></div>
<pre>
for (place in D.places()) async at (place) {
    for (p in D&#124;here) {
        S(p);
    }
}
</pre>

<div class="p"><!----></div>
If the programmer wishes to execute <b>S</b> in parallel at each place,
<b>S(p)</b> may be replaced by 
<b>async S(p)</b>.

<div class="p"><!----></div>
 <h2><a name="tth_sEc6">
6</a>&nbsp;&nbsp;<b>var</b>s and Activities</h2>

<div class="p"><!----></div>
X10 restricts the use of local <b>var</b> variables in activities, to make
programs more deterministic. Specifically, a local <b>var</b> variable <b>x</b>
defined outside of <b>async S</b> cannot appear inside <b>async S</b> unless
there is a <b>finish</b> surrounding <b>async S</b> with the definition of
<b>x</b> outside of it.

<div class="p"><!----></div>
The following code is fine; the definition of <b>result</b> appears outside of
the <b>finish</b> block: 
<pre>
var result : Int = 0;
finish { 
  async result = 1;
}
assert result == 1;
</pre>

<div class="p"><!----></div>
This code is deterministic: the <b>async</b> will finish before the
<b>println</b> starts, and it will print <b>result=1</b>.  

<div class="p"><!----></div>
However, without the
<b>finish</b>, it would be wrong, and would not compile in X10.  If it were
allowed to compile, the activity might finish or might not finish before the
<b>println</b>, and the program would not be deterministic.


<div class="p"><!----></div>
 <h2><a name="tth_sEc7">
7</a>&nbsp;&nbsp;Atomic blocks</h2><a name="AtomicBlocks">
</a>


<div class="p"><!----></div>
X10's <b>atomic</b> blocks provide a high-level construct for coordinating
the mutation of shared data. 
A programmer may use atomic blocks to guarantee that invariants of
shared data-structures are maintained even as they are being accessed
simultaneously by multiple activities running in the same place.  

<div class="p"><!----></div>
An X10 program in which all accesses (both reads and writes) of shared
variables appear in <b>atomic</b> or <b>when</b> blocks is guaranteed to use all
shared variables atomically.  Equivalently, 
if two accesses to some shared variable <b>v</b> could collide at runtime, and
one is in an atomic block, then the other must be in an atomic block as well
to guarantee atomicity of the accesses to <b>v</b>. 
If some accesses to shared variables are not
protected by <b>atomic</b> or <b>when</b>, then race conditions or deadlocks may
occur.  

<div class="p"><!----></div>
In particular, atomic sections are atomic with respect to each other. They may
not be atomic with respect to non-atomic code.  

<div class="p"><!----></div>
X10 guarantees that atomic sections at the same place are mutually exclusive.
That is, if one activity A at a given place p is executing an atomic
section, then no other activity B at p will also be executing an atomic
section. If such a B attempts to execute an <b>atomic</b> or <b>when</b>
command, it will be blocked until A finishes executing its atomic section.  

<div class="p"><!----></div>

 
 
  
  
  
  <em>
  
<table>

<tr><td align="right">AtomicStatement ::= <b>atomic</b> Statement </td></tr>
<tr><td align="right">WhenStatement ::= <b>when</b> <b>(</b> Exp <b>)</b> Statement </td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
Consider a class <b>Redund[T]</b>, which encapsulates a list
<b>list</b> and, (redundantly) keeps the size of the list in a second field
<b>size</b>.  Then <b>r:Redund[T]</b> has the invariant 
<b>r.list.size() == r.size</b>, which must be true at any point at which
no method calls on <b>r</b> are active.

<div class="p"><!----></div>
If the <b>add</b> method on <b>Redund</b> (which adds an element to the list) 
were defined as: 
<pre>
def add(x:T) { // Incorrect
  this.list.add(x);
  this.size = this.size + 1;
}
</pre>
Then two activities simultaneously adding elements to the same <b>r</b> could break the
invariant.  Suppose that <b>r</b> starts out empty.  Let the first activity
perform the <b>list.add</b>, and compute <b>this.size+1</b>, which is 1, but not store it
back into <b>this.size</b> yet.  
(At this point, <b>r.list.size()==1</b> and <b>r.size==0</b>; the invariant
expression is false, but, as the first call to <b>r.add()</b> is active, the
invariant does not need to be true - it only needs to be true when the
call finishes.)
Now, let the second activity do its call to
<b>add</b> to completion, which finishes with <b>r.size==1</b>.  
(As before, the invariant expression is false, but a call to <b>r.add()</b> is
still active, so the invariant need not be true.)
Finally, let
the first activity finish, which assigns the <b>1</b> computed before back into
<b>this.size</b>.  At the end, there are two elements in <b>r.list</b>, but
<b>r.size==1</b>. Since there are no calls to <b>r.add()</b> active, the
invariant is required to be true, but it is not.

<div class="p"><!----></div>
In this case, the invariant can be maintained by making the increment atomic.
Doing so forbids that sequence of events; the <b>atomic</b> block cannot be
stopped partway.  
<pre>
def add(x:T) { 
  atomic {
    this.list.add(x);
    this.size = this.size + 1; 
  }
}
</pre>


<div class="p"><!----></div>
     <h3><a name="tth_sEc7.1">
7.1</a>&nbsp;&nbsp;Unconditional atomic blocks</h3>
The simplest form of an atomic block is the <em>unconditional
atomic block</em>: <b>atomic S</b>.
When <b>atomic S</b> is executing at some place <b>p</b>, no other activity at
<b>p</b> may enter an atomic block.  
So, other activities may continue, even at the same place, but code protected
by atomic blocks is not subject to interference from other code in atomic
blocks. 

<div class="p"><!----></div>
If execution of the statement may throw an exception, it is
the programmer's responsibility to wrap the atomic block within a
<b>try</b>/<b>finally</b> clause and include undo code in the finally
clause. Thus the <b>atomic</b> statement only guarantees atomicity on
successful execution, not on a faulty execution.

<div class="p"><!----></div>
Atomic blocks are closely related to non-blocking synchronization
constructs [], and can be used to implement 
non-blocking concurrent algorithms.

<div class="p"><!----></div>
Code executed inside of <b>atomic S</b> and <b>when(E)S</b> is subject
to certain restrictions. A violation of these restrictions causes an 
<b>IllegalOperationException</b> to be thrown at the point of the violation.

<div class="p"><!----></div>

<ul>
<li> <b>S</b> may not spawn another activity.
<div class="p"><!----></div>
</li>

<li> <b>S</b> may not use any blocking statements; <b>when</b>, <b>next</b>,
      <b>finish</b>.  (The use of a nested <b>atomic</b> is permitted.)
<div class="p"><!----></div>
</li>

<li> <b>S</b> may not <b>force()</b> a <b>Future</b>.
<div class="p"><!----></div>
</li>

<li> <b>S</b> may not use <b>at</b> expressions.
<div class="p"><!----></div>
</li>
</ul>

<div class="p"><!----></div>
Note an important property of an (unconditional) atomic block:

<br clear="all" /><table border="0" width="100%"><tr><td>
<table border="0" cellspacing="0" cellpadding="0">
 <tr><td width="50%"></td><td nowrap="nowrap" align="right" colspan="1"><table><tr><td nowrap="nowrap" align="right" colspan="1"><b><b>atomic</b> {<b>s</b><b>1</b><b>;</b> <b>atomic</b> <b>s</b><b>2</b>}</b> = <b><b>atomic</b> {<b>s</b><b>1</b><b>;</b> <b>s</b><b>2</b>}</b></td></tr></table></td><td width="50%"></td><td width="1" align="right">(1)</td></tr></table>
</td></tr></table>



<div class="p"><!----></div>
Atomic blocks do not introduce deadlocks.    They may exhibit all the bad
behavior of sequential programs, including throwing exceptions and running
forever, but they are guaranteed not to deadlock.

<div class="p"><!----></div>
The following class method implements a (generic) compare and swap (CAS) operation:

<div class="p"><!----></div>
<pre>
var target:Object = null;
public atomic def CAS(old1: Object, y: Object):Boolean {
   if (target.equals(old1)) {
     target = y;
     return true;
   }
   return false;
}
</pre>


<div class="p"><!----></div>
     <h3><a name="tth_sEc7.2">
7.2</a>&nbsp;&nbsp;Conditional atomic blocks</h3>



<div class="p"><!----></div>
Conditional atomic blocks allow the activity to wait for some condition to be
satisfied before executing an atomic block. For example, consider a
<b>Redund</b> class holding a list <b>r.list</b> and, redundantly, its length
<b>r.size</b>.  A <b>pop</b> operation will delay until the <b>Redund</b> is
nonempty, and then remove an element and update the length.  
<pre>
def pop():T {
  var ret : T;
  when(size&#62;0) {
    ret = list.removeAt(0);
    size -;
    }
  return ret;
}
</pre>

<div class="p"><!----></div>
The execution of the test is atomic with the execution of the block.  This is
important; it means that no other activity can sneak in and make the condition
be false after the test was seen to be true, but 
before the block is executed.  In this example, two <b>pop</b>s
executing on a list with one element would work properly. Without the
conditional atomic block - even doing the decrement atomically - one call to
<b>pop</b> could pass the <b>size&#62;0</b> guard; then the other call could run to
completion (removing the only element of the list); then, when the first call
proceeds, its <b>removeAt</b> will fail.  

<div class="p"><!----></div>
Note that <b>if</b> would not work here.  
<pre>
if(size&#62;0) atomic{size--; return list.removeAt(0);}
</pre>
allows another
activity to act between the test and the atomic block.  
And 
<pre>
atomic{ if(size&#62;0) {size--; ret = list.removeAt(0);}}
</pre>
does not wait for <b>size&#62;0</b> to become true.

<div class="p"><!----></div>
Conditional atomic blocks are of the form <b>when(b)S</b>; 
<b>b</b> is called the <em>guard</em>, and <b>S</b> the <em>body</em>.

<div class="p"><!----></div>
An activity executing such a statement suspends until such time as the  guard
is true in the current state. In that state, the 
body is executed. 
The checking of the guards and the execution of the corresponding
guarded statement is done atomically. 

<div class="p"><!----></div>
X10 does not guarantee that a conditional atomic block
will execute if its condition holds only intermittently. For, based on
the vagaries of the scheduler, the precise instant at which a
condition holds may be missed. Therefore the programmer is advised to
ensure that conditions being tested by conditional atomic blocks are
eventually stable, , they will continue to hold until the block
executes (the action in the body of the block may cause the condition
to not hold any more).

<div class="p"><!----></div>
The statement <b>when (true) S</b> is
behaviorally identical to <b>atomic S</b>: it never suspends.

<div class="p"><!----></div>
The body <b>S</b> of <b>when(b)S</b> is subject to the same restrictions that
the body of <b>atomic S</b> is.  The guard is subject to the same restrictions
as well.  Furthermore, guards should not have side effects.

<div class="p"><!----></div>
Note that this implies that guarded statements are required to be <em>
flat</em>, that is, they may not contain conditional atomic blocks. (The
implementation of nested conditional atomic blocks may require
sophisticated operational techniques such as rollbacks.)

<div class="p"><!----></div>
The following class shows how to implement a bounded buffer of size
1 in X10 for repeated communication between a sender and a
receiver.  The call <b>buf.send(ob)</b> waits until the buffer has space, and
then puts <b>ob</b> into it.  Dually, <b>buf.receive()</b> waits until the
buffer has something in it, and then returns that thing.

<div class="p"><!----></div>
<pre>
class OneBuffer[T] {
  var datum: T;
  def this(t:T) { this.datum = t; this.filled = true; }
  var filled: Boolean;
  public def send(v: T) {
    when (!filled) {
      this.datum = v;
      this.filled = true;
    }
  }
  public def receive(): T {
    when (filled) {
      v: T = datum;
      filled = false;
      return v;
    }
  }
}
</pre>


<div class="p"><!----></div>
 <h2><a name="tth_sEc8">
8</a>&nbsp;&nbsp;Use of Atomic Blocks</h2>

<div class="p"><!----></div>
The semantics of atomicity is chosen as a compromise between programming
simplicity and efficient implementation.  Unlike some possible definitions of
"atomic", atomic blocks do not provide absolute atomicity.  

<div class="p"><!----></div>
Atomic blocks are atomic with respect to <em>each other</em>.
<pre>
var n : Int = 0;
finish {
  async atomic n = n + 1; //(a)
  async atomic n = n + 2; //(b)
}
</pre>
This program has only two possible interleavings: either <b>(a)</b> entirely
precedes <b>(b)</b> or <b>(b)</b> entirely precedes <b>(a)</b>.  Both end up with
<b>n==3</b>. 

<div class="p"><!----></div>
However, atomic blocks are not atomic with respect to non-atomic code.  It we
remove the  <b>atomic</b>s on <b>(a)</b>, we get far messier semantics.
<pre>
var n : Int = 0;
finish {
  // LEGAL BUT UNWISE 
  async n = n + 1;          //(a)
  async atomic n = n + 2;   //(b)
}
</pre>

<div class="p"><!----></div>
If X10 had absolute atomic semantics, this program would be guaranteed to
treat the atomic increment as a single statement.  This would permit three
interleavings: the two possible from the fully atomic program, or a third one
with the events:  <b>(a)</b>'s read of <b>0</b> from <b>n</b>, the entirety of
<b>(b)</b>, and then <b>(a)</b>'s write of <b>0+1</b> back to <b>n</b>.  This
interleaving results in <b>n==1</b>. So, with absolute atomic semantics,
<b>n==1</b> or <b>n==3</b> are the possible results.

<div class="p"><!----></div>
However, X10's semantics are weaker than that.  Atomic statements are atomic
with respect to each other - but there is no guarantee about how they
interact with non-atomic statements at all.  They might even break up the
atomicity of an <b>atomic</b> block.
In particular, the following
fourth interleaving is possible: <b>(a)</b>'s read of <b>0</b> from <b>n</b>, 
<b>(b)</b>'s read of <b>0</b> from <b>n</b>, <b>(a)</b>'s write of <b>1</b> to
<b>n</b>, and <b>(b)</b>'s write of <b>2</b> to <b>n</b>.   Thus, <b>n==2</b> is
permissible as a result in X10.

<div class="p"><!----></div>
X10's semantics permit more efficient implementation than absolute atomicity.
Absolute atomicity would, in principle, require all activities at place
<b>p</b> to stop whenever one of them enters an atomic section, which would
seriously curtail concurrency.  X10 simply requires that, when one activity is
in an atomic section, that other activities stop <em>when they are trying to
enter an atomic section</em> - which is to say, they can continue computing on
their own all they like.  The difference can be substantial, both in execution
time and possible behaviors.

<div class="p"><!----></div>
However, X10's semantics do impose a certain burden on the programmer.  A
sufficient rule of thumb is that, if <em>any</em> access to a
variable is done in an atomic section, then <em>all</em> accesses to it must be
in atomic sections.  

<div class="p"><!----></div>
Atomic sections are a powerful and convenient general solution.  Classes in
the package 
<b>x10.util.concurrent</b> may be more efficient and more convenient in
particular cases.  For example, an <b>AtomicInteger</b> provides an atomic
integer cell, with atomic get, set, compare-and-set, and add operations.
Each <b>AtomicInteger</b> takes care of its own locking.  Accesses to one 
<b>AtomicInteger</b> a only block activities which try to access a -
not others, not even if they are using different <b>AtomicInteger</b>s or even
<b>atomic</b> blocks.
<hr /><h3>Footnotes:</h3>

<div class="p"><!----></div>
<a name="tthFtNtAAB"></a><a href="#tthFrefAAB"><sup>1</sup></a>Note
  that depending on the state of the computation the activation path may
  traverse activities that are running, blocked or terminated.
<div class="p"><!----></div>
<a name="tthFtNtAAC"></a><a href="#tthFrefAAC"><sup>2</sup></a>In X10 v2.2 the <b>finish</b>
statement is the only statement that marks its activity as a root
activity. Future versions of the language may introduce more such
statements.
<br /><br />
</html>
