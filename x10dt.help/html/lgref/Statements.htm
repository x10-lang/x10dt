<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
           "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<meta name="GENERATOR" content="TtH 3.89">
 <style type="text/css"> div.p { margin-top: 7pt;}</style>
 <style type="text/css"><!--
 td div.comp { margin-top: -0.6ex; margin-bottom: -1ex;}
 td div.comb { margin-top: -0.6ex; margin-bottom: -.6ex;}
 td div.hrcomp { line-height: 0.9; margin-top: -0.8ex; margin-bottom: -1ex;}
 td div.norm {line-height:normal;}
 span.roman {font-family: serif; font-style: normal; font-weight: normal;} 
 span.overacc2 {position: relative;  left: .8em; top: -1.2ex;}
 span.overacc1 {position: relative;  left: .6em; top: -1.2ex;} --></style>
 
      
<title>`</title>

<div class="p"><!----></div>
`\`=13


<div class="p"><!----></div>
`^^M=13 

<div class="p"><!----></div>
`^^I=13 

<div class="p"><!----></div>
}}


<div class="p"><!----></div>

<div class="p"><!----></div>

<div class="p"><!----></div>
    




<div class="p"><!----></div>

<div class="p"><!----></div>
  
<div class="p"><!----></div>

<div class="p"><!----></div>
 <h1><a name="tth_chAp1">
Chapter 12 </a><br />Statements</h1><a name="XtenStatements">
</a>

<div class="p"><!----></div>
This chapter describes the statements in the sequential core of
X10.  Statements involving concurrency and distribution
are described in &#167;14.

<div class="p"><!----></div>
 <h2><a name="tth_sEc1">
1</a>&nbsp;&nbsp;Empty statement</h2>

<div class="p"><!----></div>
The empty statement <b>;</b> does nothing.  It is useful when a
loop header is evaluated for its side effects.  For example,
the following code sums the elements of a 1-dimensional array.

<div class="p"><!----></div>
<pre>
var sum: Int = 0;
for (var i: Int = 0; i &lt; a.size; i++, sum += a(i))
    ;
</pre>

<div class="p"><!----></div>
 <h2><a name="tth_sEc2">
2</a>&nbsp;&nbsp;Local variable declaration</h2>




<div class="p"><!----></div>
<em> 
<table>
<tr><td align="right">LocalVariableDeclStatement    ::= LocalVariableDecl <b>;</b> </td></tr>
<tr><td align="right">
 LocalVariableDecl    ::= Mods<sup>?</sup>&nbsp;VarKeyword VariableDeclarators </td></tr>
<tr><td align="right">
    &#124; Mods<sup>?</sup>&nbsp;VariableDeclaratorsWithType</td></tr>
<tr><td align="right">&#124; Mods<sup>?</sup>&nbsp;VarKeyword FormalDeclarators</td></tr>
<tr><td align="right">VariableDeclaratorsWithType    ::= VariableDeclaratorWithType </td></tr>
<tr><td align="right">
    &#124; VariableDeclaratorsWithType <b>,</b> VariableDeclaratorWithType</td></tr>
<tr><td align="right">VariableDeclarators    ::= VariableDeclarator </td></tr>
<tr><td align="right">
    &#124; VariableDeclarators <b>,</b> VariableDeclarator</td></tr>
<tr><td align="right">VariableInitializer    ::= Exp </td></tr>
<tr><td align="right">
 FormalDeclarators    ::= FormalDeclarator </td></tr>
<tr><td align="right">
    &#124; FormalDeclarators <b>,</b> FormalDeclarator</td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
Short-lived variables are introduced by local variables declarations, as
described in &#167;5. Local variables may be declared only
within a block statement (&#167;). The scope of a local variable
declaration is the statement itself and the subsequent statements in the
block.
<pre>
  if (a &#62; 1) {
     val b = a/2;
     var c : Int = 0;
     // b and c are defined here
  }
  // b and c are not defined here.
</pre>

<div class="p"><!----></div>
 <h2><a name="tth_sEc3">
3</a>&nbsp;&nbsp;Block statement</h2>

<a name="Blocks">
</a>

<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">Block    ::= <b>{</b> BlockStatements<sup>?</sup>&nbsp;<b>}</b> </td></tr>
<tr><td align="right">
 BlockStatements    ::= BlockStatement </td></tr>
<tr><td align="right">
    &#124; BlockStatements BlockStatement</td></tr>
<tr><td align="right">BlockStatement    ::= LocalVariableDeclStatement </td></tr>
<tr><td align="right">
    &#124; ClassDecl</td></tr>
<tr><td align="right">&#124; TypeDefDecl</td></tr>
<tr><td align="right">&#124; Statement</td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
A block statement consists of a sequence of statements delimited by
"<b>{</b>" and "<b>}</b>". When a block is evaluated, the statements inside
of it are evaluated in order.  Blocks are useful for putting several
statements in a place where X10 asks for a single one, such as the consequent
of an <b>if</b>, and for limiting the scope of local variables.
<pre>
if (b) {
  // This is a block
  val v = 1;
  S1(v); 
  S2(v);
}
</pre>

<div class="p"><!----></div>
 <h2><a name="tth_sEc4">
4</a>&nbsp;&nbsp;Expression statement</h2>

<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">ExpStatement    ::= StatementExp <b>;</b> </td></tr>
<tr><td align="right">
 StatementExp    ::= Assignment </td></tr>
<tr><td align="right">
    &#124; PreIncrementExp</td></tr>
<tr><td align="right">&#124; PreDecrementExp</td></tr>
<tr><td align="right">&#124; PostIncrementExp</td></tr>
<tr><td align="right">&#124; PostDecrementExp</td></tr>
<tr><td align="right">&#124; MethodInvocation</td></tr>
<tr><td align="right">&#124; ClassInstCreationExp</td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
The expression statement evaluates an expression.  The value of the expression
is not used.
Side effects of the expression occur.  
<pre>
class StmtEx {
  def this() { x10.io.Console.OUT.println("New StmtEx made");  }
  static def call() { x10.io.Console.OUT.println("call!");  }
  def example() {
     var a : Int = 0;
     a = 1; // assignment
     new StmtEx(); // allocation
     call(); // call
  }
}
</pre>
Only selected forms of expression can appear in expression
statements: assignments, increments, decrements, method invocations, and
constructor invocations. 

<div class="p"><!----></div>
 <h2><a name="tth_sEc5">
5</a>&nbsp;&nbsp;Labeled statement</h2>



<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">LabeledStatement    ::= Id <b>:</b> LoopStatement </td></tr>
<tr><td align="right">
 LoopStatement    ::= ForStatement </td></tr>
<tr><td align="right">
    &#124; WhileStatement</td></tr>
<tr><td align="right">&#124; DoStatement</td></tr>
<tr><td align="right">&#124; AtEachStatement</td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
Loop statements (<b>for</b>, <b>while</b>, <b>do</b>, <b>ateach</b>) may be labeled. The label may be used as the target of a break
or continue statement. The scope of a label is the statement labeled.
<pre>
lbl : for ([i] in 1..10) {
   for ([j] in i..10) {  
      if (a(i,j) == 0) break lbl;
      if (a(i,j) == 1) continue lbl;
      if (a(i,j) == a(j,i)) break lbl;
   }
}
</pre>

<div class="p"><!----></div>
 <h2><a name="tth_sEc6">
6</a>&nbsp;&nbsp;Break statement</h2>


<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">BreakStatement    ::= <b>break</b> Id<sup>?</sup>&nbsp;<b>;</b> </td></tr>
<tr><td align="right">
</td></tr></table>
</em>

<div class="p"><!----></div>
An unlabeled break statement exits the currently enclosing loop or switch
statement. An labeled break statement exits the enclosing loop or switch
statement with the given label.
It is illegal to break out of a loop not defined in the current
method, constructor, initializer, or closure.  

<div class="p"><!----></div>
The following code searches for an element of a two-dimensional
array and breaks out of the loop when it is found:

<div class="p"><!----></div>
<pre>
var found: Boolean = false;
outer: for (var i: Int = 0; i &lt; a.length; i++)
    for (var j: Int = 0; j &lt; a(i).length; j++)
        if (a(i)(j) == v) {
            found = true;
            break outer;
        }
</pre>

<div class="p"><!----></div>
 <h2><a name="tth_sEc7">
7</a>&nbsp;&nbsp;Continue statement</h2>


<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">ContinueStatement    ::= <b>continue</b> Id<sup>?</sup>&nbsp;<b>;</b> </td></tr>
<tr><td align="right">
</td></tr></table>
</em>

<div class="p"><!----></div>
An unlabeled <b>continue</b> skips the rest of the current iteration of the
innermost enclosing loop, and proceeds on to the next.  A labeled
<b>continue</b> does the same to the enclosing loop with that label.
It is illegal to continue a loop not defined in the current
method, constructor, initializer, or closure.

<div class="p"><!----></div>
 <h2><a name="tth_sEc8">
8</a>&nbsp;&nbsp;If statement</h2>


<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">IfThenStatement    ::= <b>if</b> <b>(</b> Exp <b>)</b> Statement </td></tr>
<tr><td align="right">
 IfThenElseStatement    ::= <b>if</b> <b>(</b> Exp <b>)</b> Statement  <b>else</b> Statement  </td></tr>
<tr><td align="right">
</td></tr></table>
</em>

<div class="p"><!----></div>
An if statement comes in two forms: with and without an else
clause.

<div class="p"><!----></div>
The if-then statement evaluates a condition expression, which must be of type
<b>Boolean</b>. If the condition is <b>true</b>, it evaluates the then-clause.
If the condition is <b>false</b>, the if-then statement completes normally.

<div class="p"><!----></div>
The if-then-else statement evaluates a condition expression and 
evaluates the then-clause if the condition is
<b>true</b>; otherwise, the <b>else</b>-clause is evaluated.

<div class="p"><!----></div>
As is traditional in languages derived from Algol, the if-statement is syntactically
ambiguous.  That is, 
<pre>
if (B1) if (B2) S1 else S2
</pre>
could be intended to mean either 
<pre>
if (B1) { if (B2) S1 else S2 }
</pre>
or 
<pre>
if (B1) {if (B2) S1} else S2
</pre>
X10, as is traditional, attaches an <b>else</b> clause to the most recent
<b>if</b> that doesn't have one.
This example is interpreted as 
<b>if (B1) { if (B2) S1 else S2 }</b>. 

<div class="p"><!----></div>
 <h2><a name="tth_sEc9">
9</a>&nbsp;&nbsp;Switch statement</h2>


<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">SwitchStatement    ::= <b>switch</b> <b>(</b> Exp <b>)</b> SwitchBlock </td></tr>
<tr><td align="right">

<div class="p"><!----></div>
 SwitchBlock    ::= <b>{</b> SwitchBlockStatementGroups<sup>?</sup>&nbsp;SwitchLabels<sup>?</sup>&nbsp;<b>}</b> </td></tr>
<tr><td align="right">
 SwitchBlockStatementGroups    ::= SwitchBlockStatementGroup </td></tr>
<tr><td align="right">
    &#124; SwitchBlockStatementGroups SwitchBlockStatementGroup</td></tr>
<tr><td align="right">SwitchBlockStatementGroup    ::= SwitchLabels BlockStatements </td></tr>
<tr><td align="right">
 SwitchLabels    ::= SwitchLabel </td></tr>
<tr><td align="right">
    &#124; SwitchLabels SwitchLabel</td></tr>
<tr><td align="right">SwitchLabel    ::= <b>case</b> ConstantExp <b>:</b> </td></tr>
<tr><td align="right">
    &#124; <b>default</b> <b>:</b></td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
A switch statement evaluates an index expression and then branches to
a case whose value equal to the value of the index expression.
If no such case exists, the switch branches to the 
<b>default</b> case, if any.

<div class="p"><!----></div>
Statements in each case branch evaluated in sequence.  At the
end of the branch, normal control-flow falls through to the next case, if
any.  To prevent fall-through, a case branch may be exited using
a <b>break</b> statement.

<div class="p"><!----></div>
The index expression must be of type <b>Int</b>.
Case labels must be of type <b>Int</b>, <b>Byte</b>, <b>Short</b>, or <b>Char</b>
and must be compile-time 
constants.  Case labels cannot be duplicated within the
<b>switch</b> statement.

<div class="p"><!----></div>
In the following example, case <b>1</b> falls through to case <b>2</b>.  The
other cases are separated by <b>break</b>s.
<pre>
switch (i) {
  case 1: println(&#246;ne, and ");
  case 2: println("two"); 
          break;
  case 3: println("three");
          break;
  default: println("Something else");
           break;
}
</pre>

<div class="p"><!----></div>
 <h2><a name="tth_sEc10">
10</a>&nbsp;&nbsp;While statement</h2>


<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">WhileStatement    ::= <b>while</b> <b>(</b> Exp <b>)</b> Statement </td></tr>
<tr><td align="right">
</td></tr></table>
</em>

<div class="p"><!----></div>
A while statement evaluates a <b>Boolean</b>-valued condition and executes a
loop body if <b>true</b>. If the loop body completes normally (either by
reaching the end or via a <b>continue</b> statement with the loop header as
target), the condition is reevaluated and the loop repeats if <b>true</b>. If
the condition is <b>false</b>, the loop exits.

<div class="p"><!----></div>
<pre>
  while (n &#62; 1) {
     n = (n % 2 == 1) ? 3*n+1 : n/2;
  }
</pre>

<div class="p"><!----></div>
 <h2><a name="tth_sEc11">
11</a>&nbsp;&nbsp;Do-while statement</h2>


<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">DoStatement    ::= <b>do</b> Statement <b>while</b> <b>(</b> Exp <b>)</b> <b>;</b> </td></tr>
<tr><td align="right">
</td></tr></table>
</em>

<div class="p"><!----></div>
A do-while statement executes a loop body, and then evaluates a
<b>Boolean</b>-valued condition expression. If <b>true</b>, the loop repeats.
Otherwise, the loop exits.

<div class="p"><!----></div>
 <h2><a name="tth_sEc12">
12</a>&nbsp;&nbsp;For statement</h2>


<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">ForStatement    ::= BasicForStatement </td></tr>
<tr><td align="right">
    &#124; EnhancedForStatement</td></tr>
<tr><td align="right">BasicForStatement    ::= <b>for</b> <b>(</b> ForInit<sup>?</sup>&nbsp;<b>;</b> Exp<sup>?</sup>&nbsp;<b>;</b> ForUpdate<sup>?</sup>&nbsp;<b>)</b> Statement </td></tr>
<tr><td align="right">
 ForInit    ::= StatementExpList </td></tr>
<tr><td align="right">
    &#124; LocalVariableDecl</td></tr>
<tr><td align="right">ForUpdate    ::= StatementExpList </td></tr>
<tr><td align="right">
 StatementExpList    ::= StatementExp </td></tr>
<tr><td align="right">
    &#124; StatementExpList <b>,</b> StatementExp</td></tr>
<tr><td align="right">EnhancedForStatement    ::= <b>for</b> <b>(</b> LoopIndex <b>in</b> Exp <b>)</b> Statement </td></tr>
<tr><td align="right">
    &#124; <b>for</b> <b>(</b> Exp <b>)</b> Statement</td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
<b>for</b> statements provide bounded iteration, such as looping over a list.
It has two forms: a basic form allowing near-arbitrary iteration, <em>a la</em>
C, and an enhanced form designed to iterate over a collection.

<div class="p"><!----></div>
A basic <b>for</b> statement provides for arbitrary iteration in a somewhat
more organized fashion than a <b>while</b>.  <b>for(init; test; step)body</b> is
equivalent to: 
<pre>
{
   init;
   while(test) {
      body;
      step;
   }
}
</pre>

<div class="p"><!----></div>
<b>init</b> is performed before the loop, and is traditionally used to declare
and/or initialize the loop variables. It may be a single variable binding
statement, such as <b>var i:Int = 0</b> or <b>var i:Int=0, j:Int=100</b>. (Note
that a single variable binding statement may bind multiple variables.)
Variables introduced by <b>init</b> may appear anywhere in the <b>for</b>
statement, but not outside of it.  Or, it may be a sequence of expression
statements, such as <b>i=0, j=100</b>, operating on already-defined variables.
If omitted, <b>init</b> does nothing.

<div class="p"><!----></div>
<b>test</b> is a Boolean-valued expression; an iteration of the loop will only
proceed if <b>test</b> is true at the beginning of the loop, after <b>init</b>
on the first iteration or or <b>step</b> on later ones. If omitted, <b>test</b>
defaults to <b>true</b>, giving a loop that will run until stopped by some
other means such as <b>break</b>, <b>return</b>, or <b>throw</b>.

<div class="p"><!----></div>
<b>step</b> is performed after the loop body, between one iteration and the
next. It traditionally updates the loop variables from one iteration to the
next: <em>e.g.</em>, <b>i++</b> and <b>i++,j--</b>.  If omitted, <b>step</b> does nothing.

<div class="p"><!----></div>
<b>body</b> is a statement, often a code block, which is performed whenever
<b>test</b> is true.  If omitted, <b>body</b> does nothing.

<div class="p"><!----></div>
<a name="ForAllLoop">
</a>An enhanced for statement is used to iterate over a collection, or other
structure designed to support iteration by implementing the interface
<b>Iterable[T]</b>.    The loop variable must be of type <b>T</b>, 
or destructurable from a value of type <b>T</b>
(&#167;; in practice, this means that 
<b>for ([i] in 1..10)</b> iterates over numbers from 1 to 10, while 
<b>for (i in 1..10</b> iterates over <b>Point</b>s from 1 to 10).
Each iteration of the loop
binds the iteration variable to another element of the collection.

<div class="p"><!----></div>
<pre>
  var sum : Int = 0;
  for ([i] in 1..n) sum += i;
</pre>

<div class="p"><!----></div>
A number of library classes implement <b>Iterable</b>, and thus can be iterated
over.  For example, iterating over a <b>Region</b> iterates the <b>Point</b>s in
the region, and iterating over a <b>DistArray</b> iterates over the
<b>Point</b>s at which the distributed array is defined.

<div class="p"><!----></div>
 <h2><a name="tth_sEc13">
13</a>&nbsp;&nbsp;Return statement</h2>
<a name="ReturnStatement">
</a>


<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">ReturnStatement    ::= <b>return</b> Exp<sup>?</sup>&nbsp;<b>;</b> </td></tr>
<tr><td align="right">
</td></tr></table>
</em>

<div class="p"><!----></div>
Methods and closures may return values using a return statement.
If the method's return type is expliclty declared <b>void</b>,
the method must return without a value; otherwise, it must return
a value of the appropriate type.

<div class="p"><!----></div>
 <h2><a name="tth_sEc14">
14</a>&nbsp;&nbsp;Assert statement</h2> 


<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">AssertStatement    ::= <b>assert</b> Exp <b>;</b> </td></tr>
<tr><td align="right">
    &#124; <b>assert</b> Exp  <b>:</b> Exp  <b>;</b></td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
The statement <b>assert E</b> checks that the Boolean expression <b>E</b>
evaluates to true, and, if not, throws an <b>x10.lang.Error</b>  exception.  
The annotated assertion <b>assert E : F;</b> checks <b>E</b>, and, if it is
false, throws an <b>x10.lang.Error</b> exception with <b>F</b>'s value attached
to it. 

<div class="p"><!----></div>
For example, 
<pre>
class Example {
  public static def main(argv:Array[String](1)) {
    val a = 1;
    assert a != 1 : "Changed my mind about a";
  }
}
</pre>

compiles properly, but prints a stack trace starting with 
<pre>
x10.lang.Error: Changed my mind about a
</pre>

<div class="p"><!----></div>
 <h2><a name="tth_sEc15">
15</a>&nbsp;&nbsp;Exceptions in X10</h2>


<div class="p"><!----></div>
X10 programs can throw <em>Exceptions</em> to indicate unusual or problematic
situations.  Exceptions, as data values, are objects which which inherit from
<b>x10.lang.Throwable</b>.    Exceptions may be thrown intentionally with the
<b>throw</b> statement. Many primitives and library functions throw exceptions
if they encounter problems; <em>e.g.</em>, dividing by zero throws an instance of
<b>x10.lang.ArithmeticException</b>. 

<div class="p"><!----></div>
When an exception is thrown, statically and dynamically enclosing
<b>try</b>-<b>catch</b> blocks in the same activity can attempt to handle it.   If the throwing
statement in inside some <b>try</b> clause, and some matching <b>catch</b>
clause catches that type of exception, the corresponding <b>catch</b> body will
be executed, and the process of throwing is finished.  
If no statically-enclosing <b>try</b>-<b>catch</b> block can handle the
exception, the current method call returns (abnormally), throwing the same
exception from the point at which the method was called.  

<div class="p"><!----></div>
This process continues until the exception is handled or there are no more
calling methods in the activity. In the latter case, the activity will
terminate abnormally, and the exception will propagate to the activity's root;
see &#167; for details.

<div class="p"><!----></div>
Unlike some statically-typed languages with exceptions, X10's exceptions are
all <em>unchecked</em>. Methods do not declare which exceptions they might throw;
any method can, potentially, throw any exception.

<div class="p"><!----></div>
 <h2><a name="tth_sEc16">
16</a>&nbsp;&nbsp;Throw statement</h2>


<div class="p"><!----></div>
<em>  
<table>
<tr><td align="right">ThrowStatement    ::= <b>throw</b> Exp <b>;</b> </td></tr>
<tr><td align="right">
</td></tr></table>
</em>

<div class="p"><!----></div>
<b>throw E</b> throws an exception whose value is <b>E</b>, which must be an
instance of a subtype of <b>x10.lang.Throwable</b>. 

<div class="p"><!----></div>
For example, the following code checks if an index is in range and
throws an exception if not.

<div class="p"><!----></div>
<pre>
if (i &lt; 0 &#124;&#124; i &#62;= x.length)
    throw new MyIndexOutOfBoundsException();
</pre>

<div class="p"><!----></div>
 <h2><a name="tth_sEc17">
17</a>&nbsp;&nbsp;Try-catch statement</h2>
<em>  
<table>

<tr><td align="right">TryStatement    ::= <b>try</b> Block Catches </td></tr>
<tr><td align="right">
    &#124; <b>try</b> Block Catches<sup>?</sup>&nbsp;Finally</td></tr>
<tr><td align="right">Catches    ::= CatchClause </td></tr>
<tr><td align="right">
    &#124; Catches CatchClause</td></tr>
<tr><td align="right">CatchClause    ::= <b>catch</b> <b>(</b> FormalParam <b>)</b> Block </td></tr>
<tr><td align="right">
 Finally    ::= <b>finally</b> Block </td></tr>
<tr><td align="right">

<div class="p"><!----></div>
</td></tr></table>
</em>
Exceptions are handled with a <b>try</b> statement.
A <b>try</b> statement consists of a <b>try</b> block, zero or more
<b>catch</b> blocks, and an optional <b>finally</b> block.

<div class="p"><!----></div>
First, the <b>try</b> block is evaluated.  If the block throws an
exception, control transfers to the first matching <b>catch</b>
block, if any.  A <b>catch</b> matches if the value of the
exception thrown is a subclass of the <b>catch</b> block's formal
parameter type.

<div class="p"><!----></div>
The <b>finally</b> block, if present, is evaluated on all normal
and exceptional control-flow paths from the <b>try</b> block.
If the <b>try</b> block completes normally
or via a <b>return</b>, a <b>break</b>, or a
<b>continue</b> statement, 
the <b>finally</b>
block is evaluated, and then control resumes at
the statement following the <b>try</b> statement, at the branch target, or at
the caller as appropriate.
If the <b>try</b> block completes
exceptionally, the <b>finally</b> block is evaluated after the
matching <b>catch</b> block, if any, and then the
exception is rethrown.

<div class="p"><!----></div>

<br /><br /><hr /><small>File translated from
T<sub><font size="-1">E</font></sub>X
by <a href="http://hutchinson.belmont.ma.us/tth/">
T<sub><font size="-1">T</font></sub>H</a>,
version 3.89.<br />On 16 Oct 2010, 13:23.</small>
</html>
