<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
           "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<meta name="GENERATOR" content="TtH 3.89">
 <style type="text/css"> div.p { margin-top: 7pt;}</style>
 <style type="text/css"><!--
 td div.comp { margin-top: -0.6ex; margin-bottom: -1ex;}
 td div.comb { margin-top: -0.6ex; margin-bottom: -.6ex;}
 td div.hrcomp { line-height: 0.9; margin-top: -0.8ex; margin-bottom: -1ex;}
 td div.norm {line-height:normal;}
 span.roman {font-family: serif; font-style: normal; font-weight: normal;} 
 span.overacc2 {position: relative;  left: .8em; top: -1.2ex;}
 span.overacc1 {position: relative;  left: .6em; top: -1.2ex;} --></style>
 
      
<title>Places</title>
<a href="#tth_chAp1">Places</a> <br/>
<ul>
<li><a href="#tth_sEc1">The Structure of Places</a> <br/>
<li><a href="#tth_sEc2">here</a> <br/>
<li><a href="#tth_sEc3">at</a> <br/>
</ul>

<div class="p"><!----></div>
 


<div class="p"><!----></div>
 

<div class="p"><!----></div>
 

<div class="p"><!----></div>
 


<div class="p"><!----></div>

<div class="p"><!----></div>

<div class="p"><!----></div>
  




<div class="p"><!----></div>

<div class="p"><!----></div>
  
<div class="p"><!----></div>

<div class="p"><!----></div>
 <h1><a name="tth_chAp1">
Chapter 13 </a><br />Places</h1>
<a name="XtenPlaces">
</a>


<div class="p"><!----></div>
An X10 place is a repository for data and activities, corresponding
loosely to a process or a processor. Places induce a concept of "local". The
activities running in a place may access data items located at that place with
the efficiency of on-chip access. Accesses to remote places may take orders of
magnitude longer. X10's system of places is designed to make this obvious.
Programmers are aware of the places of their data, and know when they are
incurring communication costs, but the actual operation to do so is easy. It's
not hard to use non-local data; it's simply hard to to do so accidentally.

<div class="p"><!----></div>
The set of places available to a computation is determined at the time that
the program is started, and remains fixed through the run of the program. See
the <tt>README</tt> documentation on how to set command line and configuration
options to set the number of places.

<div class="p"><!----></div>
Places are first-class values in X10, as instances 
<b>x10.lang.Place</b>.   <b>Place</b> provides a number of useful ways to
query places, such as <b>Place.places</b>, which is a  <b>Sequence[Place]</b> of 
the places
available to the current run of the program.

<div class="p"><!----></div>
Objects and structs (with one exception) are created in a single place - the
place that the constructor call was running in. They cannot change places.
They can be <em>copied</em> to other places, and the special library struct
<b>GlobalRef</b> allows values at one place to point to values at another.  

<div class="p"><!----></div>
 <h2><a name="tth_sEc1">
1</a>&nbsp;&nbsp;The Structure of Places</h2>





<div class="p"><!----></div>
Places are numbered 0 through <b>Place.MAX_PLACES-1</b>; the number is stored
in the field 
<b>pl.id</b>.  The <b>Sequence[Place]</b> <b>Place.places()</b> contains the places of the
program, in numeric order. 
The program starts by executing a <b>main</b> method at
<b>Place.FIRST_PLACE</b>, which is 
<b>Place.places()(0)</b>; see
&#167;. 

<div class="p"><!----></div>
Operations on places include <b>pl.next()</b>, which gives the next entry
(looping around) in <b>Place.places</b> and its opposite <b>pl.prev()</b>. 
In multi-place executions, 
<b>here.next()</b> is a convenient way to express &#228; place other than <b>here</b>".
There are also a number of tests, like <b>pl.isSPE()</b> and 
<b>pl.isCUDA()</b>, which test for particular kinds of processors.

<div class="p"><!----></div>
 <h2><a name="tth_sEc2">
2</a>&nbsp;&nbsp;<tt>here</tt></h2><a name="Here">
</a>

<div class="p"><!----></div>
The variable <b>here</b> is always bound to the place at which the current
computation is running, in the same way that <b>this</b> is always bound to the
instance of the current class (for non-static code), or <b>self</b> is bound to
the instance of the type currently being constrained.  
<b>here</b> may denote different places in the same method body or even the
same expression, due to
place-shifting operations.

<div class="p"><!----></div>
This is not unusual for automatic variables:  <b>self</b> denotes 
two different values (one <b>List</b>, one <b>Int</b>) 
when one describes a non-null list of non-zero numbers as
<b>List[Int{self!=0}]{self!=null}</b>. In the following 
code, <b>here</b> has one value at 
<b>h0</b>, and a different one at <b>h1</b> (unless there is only one place).
<pre>
val h0 = here;
at (here.next()) {
  val h1 = here; 
  assert (h0 != h1);
}
</pre>

(Similar examples show that <b>self</b> and <b>this</b> have the same behavior:
<b>self</b> can be shadowed by constrained types appearing inside of type
constraints, and <b>this</b> by inner classes.)

<div class="p"><!----></div>
The following example looks through a list of references to <b>Thing</b>s.  
It finds those references to things that are <b>here</b>, and deals with them.  
<pre>
  public static def deal(things: List[GlobalRef[Thing]]) {
     for(gr in things) {
        if (gr.home == here) {
           val grHere = 
               gr as GlobalRef[Thing]{gr.home == here};
           val thing &lt;: Thing = grHere();
           dealWith(thing);
        }
     }
  }
</pre>

<div class="p"><!----></div>
 <h2><a name="tth_sEc3">
3</a>&nbsp;&nbsp; <tt>at</tt>: Place Changing</h2><a name="AtStatement">
</a>



<div class="p"><!----></div>
An activity may change place synchronously using the <b>at</b> statement or
<b>at</b> expression. Like any parallel operation, it is 
potentially expensive, as it requires, at a minimum, two messages
and the copying of all data used in the operation, and must be used with care
- but it provides the basis for multicore programming in X10.

<div class="p"><!----></div>

 
 
  
  
  
  <em>
  
<table>

<tr><td align="right">AtStatement ::= <b>at</b> PlaceExpSingleList Statement </td></tr>
<tr><td align="right">AtExp ::= <b>at</b> PlaceExpSingleList ClosureBody </td></tr>
<tr><td align="right"></td></tr></table>
</em>

<div class="p"><!----></div>
The <i>PlaceExp</i> must be an expression of type <b>Place</b> or some subtype.

<div class="p"><!----></div>

<div class="p"><!----></div>
<pre>
</pre>

<div class="p"><!----></div>
The following example creates an array <b>a</b> located <b>here</b>, and copies
it to another place.  <b>a</b> in the second place (<b>here.next()</b>) refers
to the copy.  The copy is
modified and examined.  After the <b>at</b> finishes, the original is also
examined, and (since only the copy, not the original, was modified) is observed
to be unchanged. 
<pre>
val a = [1,2,3];
at(here.next()) {
  a(1) = 4;
  assert a(0)==1 &amp;&amp; a(1)==4 &amp;&amp; a(2)==3; 
}
assert  a(0)==1 &amp;&amp; a(1)==2 &amp;&amp; a(2)==3; 
</pre>


<div class="p"><!----></div>
<pre>
</pre>
<pre>
</pre>
<pre>
</pre>
<pre>
</pre>
<pre>
</pre>
<pre>
</pre>
<pre>
</pre>
<pre>
</pre>

<div class="p"><!----></div>
     <h3><a name="tth_sEc3.1">
3.1</a>&nbsp;&nbsp;Copying Values</h3>

<div class="p"><!----></div>
An activity executing <b>at(q)S</b> at a place <b>p</b> evaluates <b>q</b> at
place <b>p</b>, which should be a <b>Place</b>.  It then moves to place <b>q</b>
to execute <b>S</b>.  The values variables that <b>S</b> refers to are copied
(&#167;) to <b>q</b>, and bound to the variables of the same
name.   If the <b>at</b> is inside of an instance method and <b>S</b> uses
<b>this</b>, <b>this</b> is copied as well.  Note that a field reference
<b>this.fld</b> or a method call <b>this.meth()</b> will cause <b>this</b> to be
copied - as will their abbreviated forms <b>fld</b> and <b>meth()</b>, despite
the lack of a visible <b>this</b>.  

<div class="p"><!----></div>
Note that the value obtained by evaluating <b>q</b>
is not necessarily distinct from <b>p</b> (<em>e.g.</em>, <b>q</b> may be
<b>here</b>). 
This does not alter the behavior of <b>at</b>.  
<b>at(here)S</b> will copy all the values mentioned in <b>S</b>, even though
there is no actual change of place, and even though the original values
already exist there. 

<div class="p"><!----></div>
On normal termination of <b>S</b> control returns to <b>p</b> and
execution is continued with the statement following 
<b>at (q) S</b>. 
If
<b>S</b> terminates abruptly with exception <b>E</b>, <b>E</b> is
serialized into a buffer, the buffer is communicated to <b>p</b> where
it is deserialized into an exception <b>E1</b> and <b>at (p) S</b>
throws <b>E1</b>.

<div class="p"><!----></div>
Since 
<b>at(p) S</b> 
is a synchronous construct, usual control-flow
constructs such as <b>break</b>, <b>continue</b>, <b>return</b> and 
<b>throw</b> are permitted in <b>S</b>.  All concurrency related
constructs - <b>async</b>, <b>finish</b>, <b>atomic</b>, <b>when</b> are
also permitted.

<div class="p"><!----></div>
The <b>at</b>-expression 
<b>at(p)E</b> 
is similar, except that, in the case of
normal termination of <b>E</b>, the value that <b>E</b> produces is serialized
into a buffer, transported to the starting place, and deserialized, and the
value of the <b>at</b>-expression is the result of deserialization.

<div class="p"><!----></div>
<b><b>Limitation: </b></b> 
X10 does not currently allow <tt>break</tt>, <tt>continue</tt>, or <tt>return</tt>
to exit from an <tt>at</tt>.

<div class="p"><!----></div>
     <h3><a name="tth_sEc3.2">
3.2</a>&nbsp;&nbsp;How <tt>at</tt> Copies Values</h3>
<a name="sect:at-init-val">
</a>

<div class="p"><!----></div>

<div class="p"><!----></div>
The values mentioned in <b>S</b> are copied to place <b>p</b> by <b>at(p)S</b> as follows.

<div class="p"><!----></div>
First, the original-expressions are evaluated to give a vector of X10 values.
Consider the graph of all values reachable from these values (except for 
<b>transient</b> fields 
(&#167;, <b>GlobalRef</b>s (&#167;); also custom
serialization (&#167; may alter this behavior)). 

<div class="p"><!----></div>
Second this graph is <em>
serialized</em> into a buffer and transmitted to place <b>q</b>.  Third,
the vector of X10 values is 
re-created at <b>q</b> 
by deserializing the buffer at
<b>q</b>. Fourth, <b>S</b> is executed at <b>q</b>, in an environment in
which each variable <b>v</b> declared in <b>F</b> 
refers to the corresponding deserialized value.  

<div class="p"><!----></div>
Note that since values accessed across an <b>at</b> boundary are
copied, the programmer may wish to adopt the discipline that either
variables accessed across an <b>at</b> boundary  contain only structs 
or stateless objects, or the methods invoked on them do not access any
mutable state on the objects. Otherwise the programmer has to ensure
that side effects are made to the correct copy of the object. For this
the struct <b>x10.lang.GlobalRef[T]</b> is often useful.

<div class="p"><!----></div>
      <h4><a name="tth_sEc3.2.1">
3.2.1</a>&nbsp;&nbsp;Serialization and deserialization.</h4>
<a name="sect:ser+deser">
</a>


The X10 runtime provides a default mechanism for
serializing/deserializing an object graph with a given set of roots.
This mechanism may be overridden by the programmer on a per class or
struct basis as described in the API documentation for
<b>x10.io.CustomSerialization</b>.  
The default mechanism performs a
deep copy of the object graph (that is, it copies the object or struct
and, recursively, the values contained in its fields), but does not
traverse <b>transient</b> fields. <b>transient</b> fields are omitted from the
serialized data.   On deserialization, <b>transient</b> fields are initialized
with their default values (&#167;).    The types of
<b>transient</b> fields must therefore have default values.

<div class="p"><!----></div>
A struct <b>s</b> of type <b>x10.lang.GlobalRef[T]</b> 
is serialized as a unique global reference to its contained object
<b>o</b> (of type <b>T</b>).  Please see the documentation
of <b>x10.lang.GlobalRef[T]</b> for more details.

<div class="p"><!----></div>
     <h3><a name="tth_sEc3.3">
3.3</a>&nbsp;&nbsp;<tt>at</tt> and Activities</h3>
<b>at(p)S</b> 
does <em>not</em> start a new activity.  It should be thought of as
transporting the current activity to <b>p</b>, running <b>S</b> there, and then
transporting it back.  <b>async</b> is the only construct in the
language that starts a new activity. In different contexts, each one
of the following makes sense:
(1)&#126;<b>async at(p) S</b> 
(spawn an activity locally to execute <b>S</b> at
<b>p</b>; here <b>p</b> is evaluated by the spawned activity) , 
(2)&#126;<b>at(p) async S</b> 
(evaluate <b>p</b> and then at <b>p</b> spawn an
activity to execute <b>S</b>), and,
(3)&#126;<b>async at(p) async S</b>. 
In most cases, <b>async at(p) S</b> is preferred to <b>at(p) async S</b>, since
the former returns instantly, but the latter blocks waiting for the remote
activity to be spawned. 

<div class="p"><!----></div>
Since 
<b>at(p) S</b> 
does not start a new activity, 
<b>S</b> may contain constructs which only make sense
within a single activity.  
For example, 
<pre>
    for(x in globalRefsToThings) 
      if (at(x.home) x().isNice()) 
        return x();
</pre>
returns the first nice thing in a collection.   If we had used 
<b>async at(x.home)</b>, this would not be allowed; 
you can't <b>return</b> from an
<b>async</b>. 

<div class="p"><!----></div>
<b><b>Limitation: </b></b> 
X10 does not currently allow <tt>break</tt>, <tt>continue</tt>, or <tt>return</tt>
to exit from an <tt>at</tt>.

<div class="p"><!----></div>
     <h3><a name="tth_sEc3.4">
3.4</a>&nbsp;&nbsp;Copying from <tt>at</tt> </h3>


<div class="p"><!----></div>
<b>at(p)S</b> copies data required in <b>S</b>, and sends it
to place <b>p</b>, before executing <b>S</b> there. The only things that are not
copied are values only reachable through <b>GlobalRef</b>s and <b>transient</b>
fields, and data omitted by custom serialization.    

<div class="p"><!----></div>
<pre>
</pre>

<div class="p"><!----></div>
<pre>
val c = new Cell[Int](9); // (1)
at (here) {               // (2) 
   assert(c() == 9);      // (3)
   c.set(8);              // (4)
   assert(c() == 8);      // (5)
}
assert(c() == 9);         // (6)
</pre>

<div class="p"><!----></div>
The <b>at</b> statement copies the <b>Cell</b> and its contents.  
After <b>(1)</b>, <b>c</b> is a <b>Cell</b> containing 9; call that cell c<sub>1</sub>
At <b>(2)</b>, that cell is copied, resulting in another cell c<sub>2</sub> whose
contents are also 9, as tested at <b>(3)</b>.
(Note that the copying behavior of <b>at</b> happens <em>even when the
destination place is the same as the starting place</em>- even with
<b>at(here)</b>.)
At <b>(4)</b>, the contents of c<sub>2</sub> are changed to 8, as confirmed at <b>(5)</b>; the contents of
c<sub>1</sub> are of course untouched.    Finally, at <b>(c)</b>, outside the scope
of the <b>at</b> started at line <b>(2)</b>, <b>c</b> refers to its original
value c<sub>1</sub> rather than the copy c<sub>2</sub>.  


<div class="p"><!----></div>
The <b>at</b> statement induces a <em>deep copy</em>.  Not only does it copy the
values of variables, it copies values that they refer to through zero or more
levels of reference.  Structures are preserved as well: if two fields
<b>x.f</b> and <b>x.g</b> refer to the same object o<sub>1</sub> in the original, then
<b>x.f</b> and <b>x.g</b> will both refer to the same object o<sub>2</sub> in the
copy.  

<div class="p"><!----></div>
In the following variation of the preceding example,
<b>a</b>'s original value a<sub>1</sub> is an array with two references to the same
<b>Cell[Int]</b> c<sub>1</sub>.  The fact that a<sub>1</sub>(0) and a<sub>1</sub>(1) are both
identical to c<sub>1</sub> is demonstrated in <b>(A)</b>-<b>(C)</b>, as a<sub>1</sub>(0) is modified
and a<sub>1</sub>(1) is observed to change.  In <b>(D)</b>-<b>(F)</b>, the copy
a<sub>2</sub> is tested in the same way, showing that a<sub>2</sub>(0) and a<sub>2</sub>(1) both
refer to the same <b>Cell[Int]</b> c<sub>2</sub>.  However, the test at <b>(G)</b>
shows that c<sub>2</sub> is a different cell from c<sub>1</sub>, because changes to
c<sub>2</sub> did not propagate to c<sub>1</sub>.  

<div class="p"><!----></div>
<pre>
</pre>

<div class="p"><!----></div>
<pre>
val c = new Cell[Int](5);
val a : Array[Cell[Int]](1) = [c,c as Cell[Int]];
assert(a(0)() == 5 &amp;&amp; a(1)() == 5);     // (A)
c.set(6);                               // (B)
assert(a(0)() == 6 &amp;&amp; a(1)() == 6);     // (C)
at(here) {
  assert(a(0)() == 6 &amp;&amp; a(1)() == 6);   // (D)
  c.set(7);                             // (E)
  assert(a(0)() == 7 &amp;&amp; a(1)() == 7);   // (F)
}
assert(a(0)() == 6 &amp;&amp; a(1)() == 6);     // (G)
</pre>

<div class="p"><!----></div>
     <h3><a name="tth_sEc3.5">
3.5</a>&nbsp;&nbsp;Copying and Transient Fields</h3>
<a name="sect:transient">
</a>




<div class="p"><!----></div>
Recall that fields of classes and structs marked <b>transient</b> are not copied by
<b>at</b>.  Instead, they are set to the default values for their types. Types
that do not have default values cannot be used in <b>transient</b> fields.

<div class="p"><!----></div>
Every <b>Trans</b> object has an <b>a</b>-field equal
to 1.  However, despite the initializer on the <b>b</b> field, it is not the
case that every <b>Trans</b> has <b>b==2</b>.  Since <b>b</b> is <b>transient</b>,
when the <b>Trans</b> value <b>this</b> is copied at <b>at(here){...}</b> in
<b>example()</b>, its <b>b</b> field is not copied, and the default value for an
<b>Int</b>, 0, is used instead.  
Note that we could not make a transient field <b>c : Intc != 0</b>, since the
type has no default value, and copying would in fact set it to zero.

<div class="p"><!----></div>
<pre>
</pre>

<div class="p"><!----></div>
<pre>
class Trans {
   val a : Int = 1;
   transient val b : Int = 2;
   //ERROR: transient val c : Int{c != 0} = 3;
   def example() {
     assert(a == 1 &amp;&amp; b == 2);
     at(here) {
        assert(a == 1 &amp;&amp; b == 0);
     }
   }
}
</pre>

<div class="p"><!----></div>
     <h3><a name="tth_sEc3.6">
3.6</a>&nbsp;&nbsp;Copying and GlobalRef</h3>
<a name="GlobalRef">
</a>



<div class="p"><!----></div>
A <b>GlobalRef[T]</b> (say <b>g</b>) contains a reference to
a value <b>v</b> of type <b>T</b>, in a form which can be transmitted, and a <b>Place</b>
<b>g.home</b> indicating where the value lives. When a 
<b>GlobalRef</b> is serialized an opaque, globally unique handle to
<b>v</b> is created.  

<div class="p"><!----></div>
The following example does not copy the value <b>huge</b>.  However, <b>huge</b>
would have been copied if it had been put into a <b>Cell</b>, or simply used
directly. 

<div class="p"><!----></div>
<pre>
</pre>

<div class="p"><!----></div>
<pre>
val huge = &#196; potentially big thing";
val href = GlobalRef(huge);
at (here) {
   use(href);
  }
}
</pre>

<div class="p"><!----></div>
Values protected in <b>GlobalRef</b>s can be retrieved by the application
operation <b>g()</b>.  <b>g()</b> is guarded; it can 
only be called when <b>g.home == here</b>.  If you  want to do anything other
than pass a global reference around or compare two of them for equality, you
need to placeshift back to the home place of the reference, often with
<b>at(g.home)</b>.   

<div class="p"><!----></div>
The following program, for reasons best known to the programmer,
modifies the 
command-line argument array.

<div class="p"><!----></div>
<pre>
</pre>

<div class="p"><!----></div>
<pre>
  public static def main(argv: Array[String](1)) {
    val argref = GlobalRef[Array[String](1)](argv);
    at(here.next()) 
        use(argref);
  }
  static def use(argref : GlobalRef[Array[String](1)]) {
    at(argref) {
      val argv = argref();
      argv(0) = "Hi!";
    }
  }
</pre>

<div class="p"><!----></div>
There is an implicit coercion from <b>GlobalRef[T]</b> to <b>Place</b>, so
<b>at(argref)S</b> goes to <b>argref.home</b>.  

<div class="p"><!----></div>
     <h3><a name="tth_sEc3.7">
3.7</a>&nbsp;&nbsp;Warnings about <b>at</b></h3>
There are two dangers involved with <b>at</b>: 

<ul>
<li> Careless use of <b>at</b> can result in copying and transmission
of very large data structures.  
In particular, it is very easy to capture
<b>this</b> - a field reference will do it - and accidentally copy everything
that <b>this</b> refers to, which can be very large.  A disciplined use of copy
specifiers to make explicit just what gets copied can ameliorate this issue.
<div class="p"><!----></div>
</li>

<li> As seen in the examples above, a local variable reference
  <b>x</b> may refer to different objects in different nested <b>at</b>
  scopes. The programmer must either ensure that a variable accessed
  across an <b>at</b> boundary has no mutable state or be prepared to
  reason about which copy gets modified.   A disciplined use of copy specifiers to give
  different names to variables can ameliorate this concern.
<div class="p"><!----></div>
</li>
</ul>

<div class="p"><!----></div>
<pre>
</pre>
<pre>
</pre>

<br /><br /><hr />
</html>
