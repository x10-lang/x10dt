<project name="futurize-paper" default="buildpdf" basedir=".">
<!-- ANT script to create PDF file from LaTeX sources -->

	<target name="init">
		<tstamp/>
		<property name="mainfile" value="paper"/>
		<property name="destdir" value="." />
		<property name="paper"   value="paper" />
		<property name="zipfile" value="${destdir}/${paper}.zip" />
		<property name="bibtex.repo" value="${destdir}"/>
	</target>

	<target name="clean" depends="init">
		<delete>
			<fileset dir="${destdir}">
			    <include name="*.log"/>
			    <include name="*.dvi"/>
			    <include name="*.aux"/>
			    <include name="*.ps"/>
			    <include name="*.bbl"/>
			    <include name="*.blg"/>
			    <include name="*.pdf"/>
			    <include name="*.toc"/>
			</fileset>
		</delete>
	</target>

	<target name="all" depends="clean,buildpdf" description="rebuild the paper">
	</target>

	<target name="builddvi" depends="init" description="build the paper in dvi form">
		<runtex latexcommand="latex"/>
		<checklog/>	
	</target>

	<target name="buildpdf" depends="init" description="build the paper in pdf form">
		<runtex latexcommand="/usr/texbin/pdflatex"/>
		<checklog/>	
	</target>

    <macrodef name="checklog" description="Fail the build if there are missing references or citations">
        <sequential>
        	<echo>Checking ${mainfile}.log for critical warnings</echo>
        	<loadfile property="log" srcfile="${mainfile}.log">
       		  <filterchain>
        		<filterreader classname="org.apache.tools.ant.filters.LineContainsRegExp">
              		  <param type="regexp" value="There were undefined references.|There were multiply-defined labels.|LaTeX Warning: Citation"/>
        		</filterreader>
	  		  </filterchain>
	        </loadfile>
        	<fail message="Check ${log} and fix the problem. Don't check in code otherwise" if="log"/>
	    </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: run latex/pdflatex command - runs it 3 times and bibtex in the middle
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="runtex">
        <attribute name="latexcommand" default="latex" />
        <sequential>
			<exec executable="@{latexcommand}" failonerror="true">
				<arg line="${mainfile}"/>
			</exec>
			<exec executable="/usr/texbin/bibtex" failonerror="false">
				<env key="BIBINPUTS" value="${bibtex.repo}"/>
				<arg line="${mainfile}"/>
			</exec>
			<exec executable="@{latexcommand}" failonerror="true">
				<arg line="${mainfile}"/>
			</exec>
			<exec executable="@{latexcommand}" failonerror="true">
				<arg line="${mainfile}"/>
			</exec>            
        </sequential>
    </macrodef>

	<target name="dvi2pdf" depends="builddvi" description="converts paper in dvi to pdf">
		<exec executable="dvipdfm">
			<arg line="${mainfile}"/>
		</exec>
	</target>

	<target name="dvi2ps" depends="builddvi" description="converts paper in dvi to ps">
		<exec executable="dvips">
			<arg line="${mainfile}"/>
		</exec>
	</target>

	<target name="exportsrc" depends="init" description="zips all sources">
		<delete file="${zipfile}" />
		<zip destfile="${zipfile}" excludes="*.aux,*.log,*.blg">
			<zipfileset dir="." includes="*.tex,*.bib,*.cls,*.sty" prefix="${paper}" />
		</zip>
	</target>

	<!--
	<target name="tags" depends="init" description="builds Emacs TAGS table">
		<sequential>
			<exec os="Linux" executable="etags" failonerror="true">
        <!- args explicitly specified so that they are in the right order ->
				<arg value="paper.tex"/>
				<arg value="s_abstract.tex"/>
				<arg value="s_introduction.tex"/>
				<arg value="s_example.tex"/>
				<arg value="lst_main_example.tex"/>
				<arg value="fig_wrapper_example.tex"/>
				<arg value="lst_runningexample.tex"/>
				<arg value="s_algorithm.tex"/>
				<arg value="fig_notation.tex"/>
				<arg value="fig_constraint-generation-rules.tex"/>
				<arg value="fig_auxiliary-defs.tex"/>
				<arg value="fig_example-constraints.tex"/>
				<arg value="fig_rules-examples.tex"/>
				<arg value="fig_solving.tex"/>
				<arg value="fig_array-example.tex"/>
				<arg value="fig_solver-example.tex"/>
				<arg value="s_evaluation.tex"/>
				<arg value="fig_resulttable.tex"/>
				<arg value="s_related-work.tex"/>
				<arg value="s_conclusions.tex"/>
				<arg value="fig_auxiliary-defs-more.tex"/>
				<arg value="fig_rules-examples-more.tex"/>
				<arg value="macros.tex"/>
			</exec>
		</sequential>
  </target> -->

	<property name="check" value="*.tex" description="specifies which file or files to check"/>
	
	<target name="finddup" depends="init" description="detects duplicated words in text">
		<exec os="Linux" executable="/bin/sh" failonerror="true"> 
			<arg line='-c "./lib/dup.gawk ${check}"'/>
     	</exec>
	</target>

	<target name="stylecheck" depends="init" description="runs styleckecher">
		<exec os="Linux" executable="/bin/sh" failonerror="true">
			<arg line='-c "./lib/style-check-0.8/style-check.rb -v -r ./lib/style-check-0.8/rules ${check}"'/>
		</exec>
	</target>

	<target name="aspell" depends="init" description="runs spellchecker">
		<exec os="Linux" executable="/bin/sh" failonerror="true"> 
			<arg line='-c "cat ${check} | aspell -a -t | grep [^*] | sort | uniq"'/>
     	</exec>
	</target>

</project>

<!--
Local Variables:
tab-width: 2
End:
-->
