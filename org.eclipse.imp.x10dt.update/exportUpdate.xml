<?xml version="1.0" encoding="UTF-8"?>
<project name="org.eclipse.imp.x10dt.update" default="build.update.zip" basedir=".">
    <import file="./buildCommon.xml"/>

	<target name="init">
		<tstamp>
			<format property="build.time" pattern="yyyyMMddHHmm"/> 
		</tstamp>
		<property name="x10dt.build.qualifier" value="v${build.time}"/>
		<echo message="Build qualifier is ${x10dt.build.qualifier}"/>

	    <xmlproperty file="../org.eclipse.imp.x10dt.feature/feature.xml" prefix="x10dt"/>

		<property name="update.name"        value="org.eclipse.imp.x10dt.update"/>
<!--    <property name="update.version"     value="${x10dt.feature(version)}"/> -->
		<propertyRegexp name="update.version" input="${x10dt.feature(version)}" regexp="(.*).qualifier" value="\1.${x10dt.build.qualifier}"/>
		<property name="update.temp.folder" value="${basedir}/update.temp.folder"/>
	    <property name="update.destination" value="${basedir}"/>
	    <property name="update.server"      value="orquesta.watson.ibm.com"/>
	    <property name="update.server.dir"  value="/usr/src/imp"/>
	    <property name="zip.file"           value="${update.destination}/${update.name}_${update.version}.${x10dt.build.qualifier}.zip"/>

		<!-- feature name(s) comma-separated, w/o trailing ".feature" -->
		<!-- note: don't include IMP stuff here, we cache that and copy it -->
	    <property name="feature.list"       value="org.eclipse.imp.x10dt"/> 
	</target>

	<target name="publish.zip" depends="init" description="Copies the update archive to the update server.">
        <echo message="Copying update zip file to update server ${update.server}"/>
        <scp file="${zip.file}" keyfile="${user.home}/.ssh/id_dsa" passphrase="" todir="${user.name}@${update.server}:${update.server.dir}"></scp>
    </target>

	<target name="build.update.zip" description="Do it all: build subprojects, collect info for update site, and zip it up">
		<antcall target="collect.update"/>
    	<antcall target="build.site.xml"/>
		<antcall target="zip.update"/>
	</target>

	<!-- One would typically run this target, then manually edit the site.xml (in update.temp.folder) to add the
	     new feature versions, and finally run 'zip.update' to build the update site archive. -->
	<target name="collect.update" depends="init" description="Builds and collects all the feature and plugin components for the update site.">
        <delete dir="${update.temp.folder}"/>
        <mkdir dir="${update.temp.folder}"/>
        <antcall target="export.features"/>
        <for param="feature" values="${feature.list}">
            <antcall target="copy.feature">
                <param name="feature.name"    value="${feature}"/>
                <param name="feature.version" value="${update.version}"/>
                <param name="feature.dir"     value="../${feature}.feature"/>
            </antcall>
        </for>

        <copy file="site.xml" todir="${update.temp.folder}" failonerror="true" overwrite="false"/>
        <copy file="index.html" todir="${update.temp.folder}" failonerror="true" overwrite="false"/>

        <mkdir dir="${update.temp.folder}/web"/>
        <copy todir="${update.temp.folder}/web" failonerror="true" overwrite="false">
            <fileset dir="${basedir}/web" includes="site.css"/>
            <fileset dir="${basedir}/web" includes="site.xsl"/>
        </copy>

        <antcall target="get.lpg.artifacts"/>
        <antcall target="get.polyglot.artifacts"/>
    	<antcall target="get.imp.artifacts"/>
		<antcall target="get.ptp.artifacts"/>
    </target>

    <target name="build.site.xml" depends="init">
    	<property name="site" value="${update.temp.folder}/site.xml"/>

    	<echo file="${site}" append="false" message="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>${line.separator}"/>
    	<echo file="${site}" append="true" message="&lt;site>${line.separator}" />
        <echo file="${site}" append="true" message="    &lt;description url=&quot;http://download.eclipse.org/technology/imp/updates/&quot;>${line.separator}"/>
    	<echo file="${site}" append="true" message="        This Eclipse update site hosts the distribution for the IMP IDE, analysis and refactoring framework, and related components.${line.separator}"/>
        <echo file="${site}" append="true" message="    &lt;/description>${line.separator}"/>

        <antcall target="add.site.categories"/>

        <antcall target="add.features.x10dt"/>
        <antcall target="add.features.sdf"/>
        <antcall target="add.features.lpg"/>
        <antcall target="add.features.polyglot"/>
    	<antcall target="add.features.imp"/>

    	<echo file="${site}" append="true" message="&lt;/site>${line.separator}"/>
    </target>

    <target name="add.site.categories">
<!--    <echo file="${site}" append="true" message="    &lt;category-def name=&quot;IMP IDE Runtime&quot; label=&quot;IMP IDE Runtime&quot;/>${line.separator}"/>
        <echo file="${site}" append="true" message="    &lt;category-def name=&quot;IMP IDE Development Tools&quot; label=&quot;IMP IDE Development Tools&quot;/>${line.separator}"/>
        <echo file="${site}" append="true" message="    &lt;category-def name=&quot;IMP Language-Specific Development Environments&quot; label=&quot;IMP Language-Specific Development Environments&quot;/>${line.separator}"/>
        <echo file="${site}" append="true" message="    &lt;category-def name=&quot;IMP Analysis&quot; label=&quot;IMP Analysis&quot;/>${line.separator}"/>
  -->
        <echo file="${site}" append="true" message="    &lt;category-def name=&quot;IMP&quot; label=&quot;IMP&quot;/>${line.separator}"/>
        <echo file="${site}" append="true" message="    &lt;category-def name=&quot;IMP Source&quot; label=&quot;IMP Source&quot;/>${line.separator}"/>
        <echo file="${site}" append="true" message="    &lt;category-def name=&quot;Prereqs&quot; label=&quot;IMP Prerequisites&quot;/>${line.separator}"/>
    </target>

    <target name="add.features.sdf">
        <antcall target="add.feature">
            <param name="feature.id"      value="sdf_eclipse_installer_feature"/>
            <param name="feature.version" value="${sdf.update.version}"/>
            <param name="category"        value="Prereqs"/>
        </antcall>
    </target>

    <target name="add.features.lpg">
        <antcall target="add.feature">
            <param name="feature.id"      value="lpg.generator"/>
            <param name="feature.version" value="2.0.17"/>
            <param name="category"        value="Prereqs"/>
        </antcall>
        <antcall target="add.feature">
            <param name="feature.id"      value="lpg.runtime"/>
            <param name="feature.version" value="2.0.17"/>
            <param name="category"        value="Prereqs"/>
        </antcall>
    </target>

    <target name="add.features.polyglot">
        <antcall target="add.feature">
            <param name="feature.id"      value="polyglot"/>
            <param name="feature.version" value="2.4.0"/>
            <param name="category"        value="Prereqs"/>
        </antcall>
    </target>

    <target name="add.features.x10dt">
        <for param="feature.id" values="${feature.list}" separator=",">
            <!-- The following, when inlined, fails to set a new feature.version for each iteration (why???) -->
            <antcall target="add.qualified.bin.src.features"/>
        </for>
    </target>

    <target name="add.features.imp">
        <for param="feature.id" values="${imp.feature.list}" separator=",">
            <!-- The following, when inlined, fails to set a new feature.version for each iteration (why???) -->
            <antcall target="add.qualified.bin.src.features"/>
        </for>
    </target>

    <target name="add.qualified.bin.src.features">
        <xmlproperty file="../${feature.id}.feature/feature.xml"/>
        <echo message="feature id = ${feature.id}"/>
        <propertyRegexp name="feature.version" input="${feature(version)}" regexp="(.*).qualifier" value="\1.${imp.build.qualifier}"/>
        <echo message="feature version = ${feature(version)}"/>
        <antcall target="add.bin.src.features">
            <param name="feature.id"      value="${feature.id}"/>
            <param name="feature.version" value="${feature.version}"/>
            <param name="category"        value="IMP"/>
        </antcall>
    </target>

    <target name="add.bin.src.features">
        <antcall target="add.feature">
            <param name="feature.id"      value="${feature.id}"/>
            <param name="feature.version" value="${feature.version}"/>
            <param name="category"        value="${category}"/>
        </antcall>
        <antcall target="add.feature">
            <param name="feature.id"      value="${feature.id}.source"/>
            <param name="feature.version" value="${feature.version}"/>
            <param name="category"        value="IMP Source"/>
        </antcall>
    </target>

    <target name="add.feature">
        <echo file="${site}" append="true">
    &lt;feature url=&quot;features/${feature.id}_${feature.version}.jar&quot;
        id=&quot;${feature.id}&quot;
        version=&quot;${feature.version}&quot;>
        &lt;category name=&quot;${category}&quot;/>
    &lt;/feature>
        </echo>
    </target>

	<target name="zip.update" depends="init" description="Creates the update site archive from the components collected by collect.update">
<!--	<loadfile property="saved.build.qualifier" srcfile=".build.qualifier"/>
		<echo message="*** The saved build qualifier is ... the envelope please... ${saved.build.qualifier}"/>
  -->
		<property name="zip.file.name" value="${update.destination}/${update.name}_${update.version}.zip"/>
        <zip destfile="${zip.file.name}" basedir="${update.temp.folder}" filesonly="false" whenempty="skip" update="false"/>
      <!--  <delete dir="${update.temp.folder}"/>   -->
    </target>

    <target name="copy.feature">
        <xmlproperty file="${feature.dir}/feature.xml" prefix="f"/>

		<echo message="  ** Copying contents of feature ${feature.name} version ${f.feature(version)} from directory ${feature.dir}"/>

		<propertyRegexp name="feature.version" input="${f.feature(version)}" regexp="(.*).qualifier" value="\1.${x10dt.build.qualifier}"/>

        <mkdir dir="${update.temp.folder}/features"/>
        <copy todir="${update.temp.folder}/features" failonerror="true" overwrite="false">
            <fileset dir="${feature.dir}" includes="${feature.name}_${feature.version}.jar"/>
        </copy>

        <mkdir dir="${update.temp.folder}/plugins"/>
        <copy todir="${update.temp.folder}/plugins" failonerror="true" overwrite="false">
            <fileset dir="${feature.dir}/plugins" includes="*.jar"/>
        </copy>
    </target>
	
	 <target name="get.lpg.artifacts">
	        <delete dir="../lpg.update/plugins" includes="*.jar"/>
	        <delete dir="../lpg.update/features" includes="*.jar"/>

	        <ant antfile="../lpg.update/exportUpdate.xml" target="build.plugins"/>
	        <ant antfile="../lpg.update/exportUpdate.xml" target="build.features"/>

	        <copy todir="${update.temp.folder}/plugins" failonerror="true" overwrite="false">
	           <fileset dir="../lpg.update/plugins" includes="lpg.runtime_*.jar"/>
	        </copy>
	        <copy todir="${update.temp.folder}/features" failonerror="true" overwrite="false">
	            <fileset dir="../lpg.update/features" includes="lpg.runtime_*.jar"/>
	        </copy>
	    </target>


    <target name="get.polyglot.artifacts">
    	<property name="polyglotPluginId"        value="polyglot3"/>
    	<property name="polyglotFeatureId"        value="polyglot3"/>
    	<!-- The name of the X10DT ws  project containing the Polyglot source snapshot is "polyglot3". -->
    	<property name="polyglotProjectName"   value="polyglot3"/>
        <delete dir="../${polyglotProjectName}/eclipseUpdates3/plugins" includes="*.jar"/>
        <delete dir="../${polyglotProjectName}/eclipseUpdates3/features" includes="*.jar"/>

	        <ant antfile="../${polyglotProjectName}/build.xml" dir="../${polyglotProjectName}" target="build-plugin"/>
	        <ant antfile="../${polyglotProjectName}/build.xml" dir="../${polyglotProjectName}" target="build-features"/>
	    
	        <copy verbose="true" todir="${update.temp.folder}/plugins" failonerror="true" overwrite="true">
	           <fileset dir="../${polyglotProjectName}/eclipseUpdates3/plugins" includes="${polyglotPluginId}_*.jar"/>
	        </copy>
	        <copy verbose="true" todir="${update.temp.folder}/features" failonerror="true" overwrite="true">
	           <fileset dir="../${polyglotProjectName}/eclipseUpdates3/features" includes="${polyglotFeatureId}_*.jar"/>
	        </copy>
	    </target>
	
	 <target name="get.imp.artifacts">
	 	<!-- imp.cache.location is the local cache of the (unzipped) IMP update site   -->
	 	<property name="imp.cache.location"        value="/Users/beth/temp/imp104"/>
	        <copy todir="${update.temp.folder}/features" failonerror="true" overwrite="false">
	           <fileset dir="${imp.cache.location}/features/" includes="org.eclipse.imp.runtime_*.jar"/>
	        	<fileset dir="${imp.cache.location}/features/" includes="org.eclipse.imp.java.hosted_*.jar"/>
	        </copy>
	 	<!-- fixme really should dynamically copy plugin jars based on list in feature manifest -->
	        <copy todir="${update.temp.folder}/plugins" failonerror="true" overwrite="false">
	            <fileset dir="${imp.cache.location}/plugins" includes="org.eclipse.imp.doc_*.jar"/>
	        	 <fileset dir="${imp.cache.location}/plugins" includes="org.eclipse.imp.runtime_*.jar"/>
	        	 <fileset dir="${imp.cache.location}/plugins" includes="org.eclipse.imp.smapi_*.jar"/>
	        	 <fileset dir="${imp.cache.location}/plugins" includes="org.eclipse.imp.smapifier_*.jar"/>
	        	 <fileset dir="${imp.cache.location}/plugins" includes="org.eclipse.imp.xform_*.jar"/>
	        	 <fileset dir="${imp.cache.location}/plugins" includes="org.eclipse.imp.java.hosted_*.jar"/>
	        	 <fileset dir="${imp.cache.location}/plugins" includes="com.ibm.wala.shrike_*.jar"/>	        
	        </copy>
	    </target>
     <target name="get.ptp.artifacts">
		<!-- ptp.cache.location is the local cache of the (unzipped) ptp update site   
		    which is the unzipped contents of ptp-master-*-subset-for-x10dt.zip   -->
		<property name="ptp.cache.location"        value="/Users/beth/temp/ptp301x"/>

		<copy todir="${update.temp.folder}/features" failonerror="true" overwrite="false">
			<!--
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp*.jar"/>
			-->
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp_*.jar"/>
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp.core*.jar"/>
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp.debug*.jar"/>
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp.master*.jar"/>
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp.external*.jar"/>
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp.remote*.jar"/>
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp.rm*.jar"/>
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp.services*.jar"/>
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp.ui*.jar"/>
			<fileset dir="${ptp.cache.location}/features/" includes="org.eclipse.ptp.utils*.jar"/>
			 
		</copy>
		<copy todir="${update.temp.folder}/plugins" failonerror="true" overwrite="false">
			<!--
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp*.jar"/>
			-->
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp_*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.aix*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.core*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.debug*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.help*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.launch*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.linux*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.macosx*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.proxy*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.remote*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.rm*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.services*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.ui*.jar"/>
			<fileset dir="${ptp.cache.location}/plugins/" includes="org.eclipse.ptp.utils*.jar"/>		 
		</copy>

	</target>
    <target name="export.features">
        <echo message="Building feature jars..."/>
        <for param="feature" values="${feature.list}">
            <ant antfile="../${feature}.feature/exportFeature.xml" target="build.feature.jar" dir="../${feature}.feature">
            	<property name="x10dt.build.qualifier" value="${x10dt.build.qualifier}"/>
        	</ant>
        </for>
        <echo message="Done building feature jars."/>
    </target>
</project>
