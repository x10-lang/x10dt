<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet title="Using the X10 Development Toolkit">
   <intro>
      <description>
         This cheat sheet briefly describes how to use the X10 Development Toolkit to create X10 projects, create X10 classes, and use launch configurations to run and debug X10 programs.
      </description>
   </intro>
   <item title="Switch to the X10 Perspective" dialog="true" skip="false">
      <description>
         If you&apos;re not currently in the X10  Perspective, you should switch to that perspective now. If you don&apos;t, certain bits of functionality will not appear at all, or they might not appear in the &quot;standard&quot; location.<br/>
<br/>
To switch perspectives, invoke &quot;Window&quot; -&gt; &quot;Open Perspective&quot; and select &quot;X10&quot;. Alternatively, you can click on the &quot;Open Perspective&quot; button in the perspective button bar and selecting &quot;X10&quot;.<br/>
<br/>
(The perspective button bar usually appears in the upper right, the upper left, or the left-hand side of the Eclipse window, and contains 1 or more iconic buttons, each representing a perspective, e.g. &quot;Java&quot;, &quot;X10&quot;, &quot;Resource&quot;, &quot;Debug&quot;, &quot;CVS&quot;.)
      </description>
      <command serialization="org.eclipse.ui.perspectives.showPerspective(org.eclipse.ui.perspectives.showPerspective.perspectiveId=x10dt.ui.perspective)" confirm="false">
      </command>
   </item>
   <item title="Create an X10 project" dialog="true" skip="false">
      <description>
         Invoke &quot;File&quot; -&gt; &quot;New&quot; -&gt; &quot;Project&quot; -&gt; &quot;X10 Project&quot;.<br/>
<br/>
In the &quot;X10 Project&quot; dialog, fill out the &quot;Name&quot; field with a unique non-existing project name.<br/>
<br/>
Most likely, you&apos;ll want to accept the default location for the project (i.e. in your workspace).<br/>
<br/>
We strongly recommend setting the &quot;Create separate source and output folders&quot; option. This will place the generated class files in a separate folder from the X10 source.
You may encounter problems in the X10DT with compiling and debugging if you don&apos;t select this option.<br/>
<br/>
Hit &quot;Finish&quot; when done editing the various fields.<br/>
<br/>
[N.B.: If &quot;X10 Project&quot; doesn&apos;t appear in the &quot;File&quot; -&gt; &quot;New&quot; menu, you can access it via the &quot;Other...&quot; menu item at the bottom of that menu. To make it always appear in the &quot;New&quot; menu, invoke &quot;Window&quot; -&gt; &quot;Customize Perspective...&quot;.
In this dialog, go to the &quot;Shortcuts&quot; page, and locate &quot;X10&quot; in the &quot;Shortcut Categories&quot; list in the left-hand pane. Check that box, and click &quot;Ok&quot;.]<br/>
<br/>
      </description>
      <action class="x10dt.ui.cheatsheet.actions.NewX10ProjectAction" pluginId="x10dt.ui" confirm="false">
      </action>
   </item>
   <item title="Create a new X10 Class" dialog="true" skip="false">
      <description>
         Invoke &quot;File&quot; -&gt; &quot;New&quot; -&gt; &quot;X10&quot; -&gt; &quot;X10 Class&quot;.<br/>
<br/>
In the &quot;Source folder&quot; field, you enter both the project in which you would like the new class to reside, and the source folder within that project that is to contain the X10 class.<br/>
<br/>
Usually, there is one source folder per project, as is the case when you follow the above instructions for creating your X10 project.<br/>
<br/>
You can type the project name and source folder into the text field, but a much easier way to do this is to click on the &quot;Browse...&quot; button next to the &quot;Source folder&quot; field. This will bring up a selection dialog that will allow you to quickly
navigate to the project and source folder you want to use.<br/>
<br/>
If you want to place the X10 class in a non-default package, enter the package name into the &quot;Package&quot; field. Again, you can use the &quot;Browse...&quot; next to the &quot;Package&quot; field to show the list of existing packages in the given project.
At this time, you cannot create a new package from within the &quot;New X10 Class&quot; dialog; it must already exist.<br/>
<br/>
Enter the name of the new X10 class in the &quot;name&quot; field, and use the modifier buttons and checkboxes to specify the visibility and other characteristics of your class.<br/>
<br/>
If you wish, enter in the &quot;Superclass&quot; field the fully-qualified name of the desired base class for your new X10 class, or use the &quot;Browse...&quot; button to the right to bring up the class selection dialog. Of course, if you leave x10.lang.Object as the superclass, you can always change the superclass later
by editing the class definition in the source code.<br/>
<br/>
To add interfaces to the class, click on the &quot;Add...&quot; button to bring up an interface selection dialog. This will display the list of all interfaces on the build-time classpath for your project.<br/>
<br/>
Hit &quot;Finish&quot; when done editing. The source file for the new class will be open in the editor. You should see the structure of the X10 class source in the &quot;Outline&quot; view.<br/>
<br/>
[N.B.: As with the above, if &quot;X10 Class&quot; doesn&apos;t appear in the &quot;File&quot; -&gt; &quot;New&quot; menu, you can access it via the &quot;Other...&quot; menu item at the bottom of that menu.
To make it always appear in the &quot;New&quot; menu, invoke &quot;Window&quot; -&gt; &quot;Customize Perspective...&quot;.
In this dialog, go to the &quot;Shortcuts&quot; page, and locate &quot;X10&quot; in the &quot;Shortcut Categories&quot; list in the left-hand pane. Check that box, and click &quot;Ok&quot;.]<br/>
<br/>
      </description>
      <action class="x10dt.ui.cheatsheet.actions.NewX10TypeAction" pluginId="x10dt.ui" confirm="false">
      </action>
   </item>
   <item title="Using the Editor and Outline View" dialog="true" skip="false">
      <description>
         You should see keywords highlighted in the source editor, as well as an outline of the source file&apos;s contents in the &quot;Outline&quot; view on the right. The Outline view shows the types, members and anonymous instances defined in the source code.<br/>
<br/>
You can navigate to a given source code entity by simply clicking on the corresponding item in the Outline view. Click on the &quot;+&quot; or &quot;-&quot; controls next to a given item in the
Outline view to expand or collapse the sub-tree rooted at that item.<br/>
<br/>
      </description>
   </item>
   <item title="Launching your X10 program" dialog="true" skip="false">
      <description>
         There are several methods available to launch an X10 application:<br/>
<br/>
- From an X10 source editor containing the main class you wish to execute, type   &quot;Alt-Shift-X&quot;, then &quot;X&quot;<br/>
<br/>
- Right-click on an X10 source file in the Package Explorer, and choose &quot;Run As&quot; -&gt;   &quot;X10 Application&quot;<br/>
<br/>
- Right-click within the X10 source editor, and choose &quot;Run As&quot; -&gt;   &quot;X10 Application&quot;<br/>
<br/>
- Click on the &quot;Run&quot; toolbar button&apos;s pull-down (the little downward-pointing triangle   next to the &quot;Run&quot; icon) and select &quot;Run As&quot; -&gt; &quot;X10 Application&quot;<br/>
<br/>
- Click on the &quot;Run&quot; toolbar button&apos;s pull-down (the little downward-pointing triangle to the right of the &quot;Run&quot; icon) and select &quot;Run...&quot; and create an &quot;X10 Application&quot;
  launch configuration. In the &quot;Main&quot; page, select the project containing the X10 application you wish to run, and the main class.<br/>
<br/>
Note: you can have launch configurations for several X10 applications within a single project, as well as multiple launch configurations for the same application.<br/>
<br/>
Arguments to be passed to your X10 application can be specified in the &quot;Arguments&quot; page in the &quot;Program Arguments&quot; pane. You can also set options to be passed to the X10 Runtime itself via the &quot;X10 Runtime&quot; page, in the &quot;Runtime arguments&quot; pane. This is useful to, for example, enable the collection of abstract execution statistics by setting the runtime option &quot;ABSTRACT_EXECUTION_STATS&quot; to &quot;true&quot; (place &quot;ABSTRACT_EXECUTION_STATS=true&quot; in the
&quot;Runtime arguments&quot; pane).<br/>
<br/>
      </description>
      <command serialization="x10dt.ui.launch.java.launching.x10LaunchShortcut.run" confirm="false">
      </command>
   </item>
   <item title="Debugging your X10 program" dialog="true" skip="false">
      <description>
         If you instead wish to debug the X10 application (which is necessary if you wish to set breakpoints, explore the stack, and so on), the procedure is essentially the same as
described above, substituting &quot;Debug&quot; for &quot;Run&quot;, or &quot;Debug As&quot; for &quot;Run As&quot;, and so on.<br/>
<br/>
As of this release, X10 debugging support provides the same set of views that you would get for Java programs, which display information about the generated Java program.<br/>
<br/>
To set a breakpoint in the X10 source code, type &quot;Ctrl-Shift-B&quot; at the desired line in the source editor. We have provided support for mapping line numbers from the X10 source code to the generated Java source code. As a result, when an exception is thrown by X10 code or a breakpoint in X10 code is reached, the debugger should present the correct X10 source line. [Of course, if an exception is thrown from within a Java method that does
not correspond to an X10 method, the debugger will display the Java source for the method throwing the exception.]<br/>
<br/>
At the same time, you may see a somewhat different picture of your application than you might expect. In particular, details of the X10 implementation will be visible: the
Java thread pool rather than the X10 activities, extra method calls corresponding to X10 array accesses, and so on. Moreover, performing a &quot;Step Into&quot; operation on an X10
application can land you inside the X10 runtime (much like stepping into a string concatenation operation in Java can land you inside the StringBuffer class).<br/>
<br/>
In the future, we hope to provide a more X10-savvy debugging perspective.<br/>
<br/>
      </description>
      <command serialization="x10dt.ui.launching.x10LaunchShortcut.debug" confirm="false">
      </command>
   </item>
</cheatsheet>
