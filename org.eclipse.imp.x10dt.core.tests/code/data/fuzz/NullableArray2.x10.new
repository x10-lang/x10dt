/*
 *
 * (C) Copyright IBM Corporation 2006
 *
 *  This file is part of X10 Test.
 *
 */
import harness.x10Test;;
import x10.array.Dist;
import x10.array.Array;

/**
 * Testing arrays whose elements are possibly nullable.
 *
 * @author kemal 4/2005
 */
public class NullableArray2 extends x10Test {

	public def run(): boolean = {
		var ia1: Rail[nullable<int>] = new Array[nullable<int>](2);
		if (ia1(1) != null) return false;

		var ia2: nullable<Rail[nullable<int>]> = null;
		if (ia2 != null) return false;

		var ia3: nullable<Array[nullable<int>]> = null;
		if (ia3 != null) return false;

		ia3 = new Array[nullable<int>](Dist.makeConstant([0..2], here));
		if (ia3(2) != null) return false;

		// it is forbidden to assign an int [.] to a nullable<int>[.]
		// ia3 = new int[[0:2]->here];

		// cannot assign a nullable int y to an element
		// of an array of int's, unless y is not null
		var y: nullable<int> = null;
		var gotException: boolean = false;

		var ia4: Array[nullable<mycomplex>] = new Array[nullable<mycomplex>](Dist.makeConstant([0..2], here), (var point [i]: point): nullable<mycomplex> => { return new mycomplex(); });
		if (ia4(2).im != 0) return false;

		var ia5: nullable<Array[nullable<mycomplex>]> = new Array[nullable<mycomplex>](Dist.makeConstant([0..2], here), (var point [i]: point): nullable<mycomplex> => { return new mycomplex(); });
		if (ia5(2).im != 0) return false;

		var ia7: nullable<Array[nullable<mycomplex>]> = null;
		if (ia7 != null) return false;

		var ia9: nullable<Array[nullable<mycomplex>]> = new Array[nullable<mycomplex>](Dist.makeConstant([0..2], here));
		if (ia9(2) != null) return false;

		return true;
	}

	public static def main(var args: Rail[String]): void = {
		new NullableArray2().execute();
	}

	static class mycomplex {
		var re: int;
		var im: int;
	}

	static class X {
		static def trueFun(): boolean = { return true; }
	}
}
