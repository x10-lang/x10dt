<project name="Build specific targets and properties" default="noDefault">

  <!-- ===================================================================== -->
  <!-- Run a given ${target} on all elements being built -->
  <!-- Add on <ant> task for each top level element being built. -->
  <!-- ===================================================================== -->
  <available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml"/>
  <property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/>

  <import file="${allElementsFile}" />
  <target name="allElements">
    <antcall target="allElementsDelegator" />
  </target>

  <!-- ===================================================================== -->
  <!-- ===================================================================== -->
  <target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
    <get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
    <unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
  </target>

  <target name="checkLocalBase">
    <available file="${base}" property="skipBase" />
  </target>

  <!-- ===================================================================== -->
  <!-- Check out map files from correct repository -->
  <!-- Replace values for mapsCheckoutTag as desired. -->
  <!-- ===================================================================== -->
  <target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
    <property name="mapsCheckoutTag" value="HEAD" />
    <cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
  </target>

  <target name="checkLocalMaps">
    <available property="skipMaps" file="${buildDirectory}/maps" />
  </target>

  <target name="tagMapFiles" if="tagMaps">
    <cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
  </target>

  <!-- ===================================================================== -->

  <target name="clean" unless="noclean">
    <antcall target="allElements">
      <param name="target" value="cleanElement" />
    </antcall>
  </target>

  <target name="gatherLogs">
    <mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
    <antcall target="allElements">
      <param name="target" value="gatherLogs" />
    </antcall>
    <unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
      <fileset dir="${buildDirectory}/features">
        <include name="**/*.log.zip" />
      </fileset>
    </unzip>
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do before setup -->
  <!-- ===================================================================== -->
  <target name="preSetup">
    <mkdir dir="${repoBaseLocation}"/>
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do after setup but before starting the build proper -->
  <!-- ===================================================================== -->
  <target name="postSetup">
    <antcall target="getBaseComponents" />
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do before fetching the build elements -->
  <!-- ===================================================================== -->
  <target name="preFetch">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do after fetching the build elements -->
  <!-- ===================================================================== -->
  <target name="postFetch">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do before the repositories are being processed -->
  <!-- ===================================================================== -->
  <target name="preProcessRepos">
<!--  	<unzip dest="${repoBaseLocation}/ptp" src="${ptp.update.loc}"/>
  	<eclipse.generateFeature featureId="org.eclipse.ptp.core" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.core;unpack=false,org.eclipse.ptp.debug.core;unpack=false,org.eclipse.ptp.debug.ui;unpack=false,org.eclipse.ptp.rm.core;unpack=false,org.eclipse.ptp.rm.ui;unpack=false,org.eclipse.ptp.launch;unpack=false,org.eclipse.ptp.ui;unpack=false,org.eclipse.ptp.help;unpack=false,org.eclipse.ptp.proxy.protocol;unpack=false,org.eclipse.ptp;unpack=false,org.eclipse.ptp.rm.proxy.core;unpack=false,org.eclipse.ptp.rm.generic.core;unpack=false,org.eclipse.ptp.rm.generic.ui;unpack=false,org.eclipse.ptp.remote.core;unpack=false,org.eclipse.ptp.remote.ui;unpack=false,org.eclipse.ptp.utils.core;unpack=false,org.eclipse.ptp.utils.ui;unpack=false,org.eclipse.ptp.services.core;unpack=false,org.eclipse.ptp.services.ui;unpack=false" 
  		includeLaunchers="false"
    />
  	<eclipse.generateFeature featureId="org.eclipse.ptp.external" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.aix.ppc;unpack=false,org.eclipse.ptp.linux.ppc;unpack=false,org.eclipse.ptp.linux.x86;unpack=false,org.eclipse.ptp.linux.x86_64;unpack=false,org.eclipse.ptp.macosx.ppc;unpack=false,org.eclipse.ptp.proxy;unpack=false,org.eclipse.ptp.utils;unpack=false,org.eclipse.ptp.macosx.x86;unpack=false,org.eclipse.ptp.debug.sdm;unpack=false,org.eclipse.ptp.rm.ibm.ll.proxy;unpack=false,org.eclipse.ptp.rm.ibm.pe.proxy;unpack=false,org.eclipse.ptp.rm.slurm.proxy;unpack=false" 
  	    includeLaunchers="false"
  	/>
  	<eclipse.generateFeature featureId="org.eclipse.ptp.remote" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.remote.core;unpack=false,org.eclipse.ptp.remote.ui;unpack=false" 
  	    includeLaunchers="false"
  	/>
  	<eclipse.generateFeature featureId="org.eclipse.ptp.remote.remotetools" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.remote.remotetools.core;unpack=false,org.eclipse.ptp.remote.remotetools.ui;unpack=false" 
  	    includeLaunchers="false"
  	/>
  	<eclipse.generateFeature featureId="org.eclipse.ptp.remotetools" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.remotetools.core;unpack=false,org.eclipse.ptp.remotetools.environment.core;unpack=false,org.eclipse.ptp.remotetools.environment.generichost;unpack=false,org.eclipse.ptp.remotetools.environment.launcher;unpack=false,org.eclipse.ptp.remotetools.environment.ui;unpack=false,org.eclipse.ptp.remotetools.preferences;unpack=false,org.eclipse.ptp.remotetools.utils;unpack=false" 
  	    includeLaunchers="false"
  	/>
  	<eclipse.generateFeature featureId="org.eclipse.ptp.rm.ibm.ll" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.rm.ibm.ll.core;unpack=false,org.eclipse.ptp.rm.ibm.ll.ui;unpack=false" 
  	    includeLaunchers="false"
  	/>
  	<eclipse.generateFeature featureId="org.eclipse.ptp.rm.ibm.pe" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.rm.ibm.pe.core;unpack=false,org.eclipse.ptp.rm.ibm.pe.ui;unpack=false" 
  	    includeLaunchers="false"
  	/>
  	<eclipse.generateFeature featureId="org.eclipse.ptp.rm.mpich2" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.rm.mpi.mpich2.core;unpack=false,org.eclipse.ptp.rm.mpi.mpich2.ui;unpack=false" 
  	    includeLaunchers="false"
  	/>
  	<eclipse.generateFeature featureId="org.eclipse.ptp.rm.openmpi" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.rm.mpi.openmpi.core;unpack=false,org.eclipse.ptp.rm.mpi.openmpi.ui;unpack=false" 
  	    includeLaunchers="false"
  	/>
  	<eclipse.generateFeature featureId="org.eclipse.ptp.services" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.services.core;unpack=false,org.eclipse.ptp.services.ui;unpack=false" 
  	    includeLaunchers="false"
  	/>
    <eclipse.generateFeature featureId="org.eclipse.ptp.utils" buildDirectory="${repoBaseLocation}/ptp"
  		baseLocation="${repoBaseLocation}/ptp" verify="false"
  		pluginList="org.eclipse.ptp.utils.core;unpack=false,org.eclipse.ptp.utils.ui;unpack=false,org.eclipse.ptp.utils.file.core;unpack=false,org.eclipse.ptp.utils.extensionpoints.core;unpack=false" 
  		includeLaunchers="false"
    />
  	<eclipse.generateFeature featureId="org.eclipse.ptp.debug.sdm" buildDirectory="${repoBaseLocation}/ptp"
  	    baseLocation="${repoBaseLocation}/ptp" verify="false"
  	    pluginList="org.eclipse.ptp.debug.sdm.core;unpack=false,org.eclipse.ptp.debug.sdm.ui;unpack=false" 
  	    includeLaunchers="false"
    />
  	<p2.publish.featuresAndBundles
  	          metadataRepository="file:${repoBaseLocation}/ptp"
  	          artifactRepository="file:${repoBaseLocation}/ptp"
  	          source="${repoBaseLocation}/ptp"/> -->
  	  	
    <p2.mirror destination="file:${repoBaseLocation}/mirror">
      <source file="${cdt.update.loc}"/>
      <source file="${ptp.update.loc}"/>
      <source file="${imp.update.loc}"/>
      <iu id="org.eclipse.cdt.feature.group" />

      <iu id="org.eclipse.ptp.core.feature.group" />
      <iu id="org.eclipse.ptp.external.feature.group"/>
      <iu id="org.eclipse.ptp.remote.feature.group" />
      <iu id="org.eclipse.ptp.remote.remotetools.feature.group" />
      <iu id="org.eclipse.ptp.remotetools.feature.group" />
      <iu id="org.eclipse.ptp.rm.ibm.ll.feature.group" />
      <iu id="org.eclipse.ptp.rm.ibm.pe.feature.group" />
      <iu id="org.eclipse.ptp.rm.mpich2.feature.group" />
      <iu id="org.eclipse.ptp.rm.openmpi.feature.group" />
      <iu id="org.eclipse.ptp.services.feature.group" />
      <iu id="org.eclipse.ptp.utils.feature.group" />
      <iu id="org.eclipse.ptp.debug.sdm.feature.group" />

      <iu id="org.eclipse.imp.runtime.feature.group" />
      <iu id="org.eclipse.imp.java.hosted.feature.group" />
      <iu id="org.eclipse.imp.analysis.feature.group" />

      <slicingOptions followStrict="true" includeOptional="false"/>
    </p2.mirror>
  	
    <unzip dest="${build.folder}/dependencies">
      <patternset>
        <include name="utils_core.jar"/>
      </patternset>
      <fileset dir="${repoBaseLocation}/mirror/plugins">
        <include name="org.eclipse.ptp.utils.core_*.jar"/>
      </fileset>
   </unzip>
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do after the repositories have been processed -->
  <!-- ===================================================================== -->
  <target name="postProcessRepos">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do before generating the build scripts. -->
  <!-- ===================================================================== -->
  <target name="preGenerate">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do after generating the build scripts. -->
  <!-- ===================================================================== -->
  <target name="postGenerate">
    <antcall target="clean" />
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do before running the build.xmls for the elements being built. -->
  <!-- ===================================================================== -->
  <target name="preProcess">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do after running the build.xmls for the elements being built. -->
  <!-- ===================================================================== -->
  <target name="postProcess">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do before running assemble. -->
  <!-- ===================================================================== -->
  <target name="preAssemble">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do after  running assemble. -->
  <!-- ===================================================================== -->
  <target name="postAssemble">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do before running package. -->
  <!-- ===================================================================== -->
  <target name="prePackage">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do after  running package. -->
  <!-- ===================================================================== -->
  <target name="postPackage">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do after the build is done. -->
  <!-- ===================================================================== -->
  <target name="postBuild">
    <antcall target="gatherLogs" />
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do to test the build results -->
  <!-- ===================================================================== -->
  <target name="test">
  </target>

  <!-- ===================================================================== -->
  <!-- Steps to do to publish the build results -->
  <!-- ===================================================================== -->
  <target name="publish">
  </target>

  <!-- ===================================================================== -->
  <!-- Default target                                                        -->
  <!-- ===================================================================== -->
  <target name="noDefault">
    <echo message="You must specify a target when invoking this file" />
  </target>

</project>
